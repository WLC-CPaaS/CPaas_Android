/**
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.CPAASError;
import org.openapitools.client.model.ServiceDocsTemporalRuleSetGetAll;
import org.openapitools.client.model.ServiceDocsTemporalRuleSetGetSingle;
import org.openapitools.client.model.ServiceVOIPTemporalRuleSetAddEditData;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class TemporalRuleSetApi {
  String basePath = "http://API_HOSTNAME";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Get Temporal Rule Set List
  * Access the temporal rule set list in an account.
   * @param accountID Account ID, 32 alpha numeric
   * @param startKey start_key for pagination that was returned as next_start_key from your previous call
   * @param pageSize number of records to return, range 1 to 50
   * @return ServiceDocsTemporalRuleSetGetAll
  */
  public ServiceDocsTemporalRuleSetGetAll v1AccountAccountIDTemporalrulesetGet (String accountID, String startKey, Integer pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDTemporalrulesetGet",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDTemporalrulesetGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/temporalruleset".replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_key", startKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsTemporalRuleSetGetAll) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsTemporalRuleSetGetAll.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Temporal Rule Set List
   * Access the temporal rule set list in an account.
   * @param accountID Account ID, 32 alpha numeric   * @param startKey start_key for pagination that was returned as next_start_key from your previous call   * @param pageSize number of records to return, range 1 to 50
  */
  public void v1AccountAccountIDTemporalrulesetGet (String accountID, String startKey, Integer pageSize, final Response.Listener<ServiceDocsTemporalRuleSetGetAll> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDTemporalrulesetGet",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDTemporalrulesetGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/temporalruleset".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_key", startKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsTemporalRuleSetGetAll) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsTemporalRuleSetGetAll.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create Temporal Rule Set
  * Develop a new temporal rule set for an account.
   * @param accountID Account ID, 32 alphanumeric
   * @param temporalruleset payload fields
   * @return ServiceDocsTemporalRuleSetGetSingle
  */
  public ServiceDocsTemporalRuleSetGetSingle v1AccountAccountIDTemporalrulesetPost (String accountID, ServiceVOIPTemporalRuleSetAddEditData temporalruleset) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = temporalruleset;
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDTemporalrulesetPost",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDTemporalrulesetPost"));
    }
    // verify the required parameter 'temporalruleset' is set
    if (temporalruleset == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'temporalruleset' when calling v1AccountAccountIDTemporalrulesetPost",
        new ApiException(400, "Missing the required parameter 'temporalruleset' when calling v1AccountAccountIDTemporalrulesetPost"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/temporalruleset".replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsTemporalRuleSetGetSingle) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsTemporalRuleSetGetSingle.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create Temporal Rule Set
   * Develop a new temporal rule set for an account.
   * @param accountID Account ID, 32 alphanumeric   * @param temporalruleset payload fields
  */
  public void v1AccountAccountIDTemporalrulesetPost (String accountID, ServiceVOIPTemporalRuleSetAddEditData temporalruleset, final Response.Listener<ServiceDocsTemporalRuleSetGetSingle> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = temporalruleset;

    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDTemporalrulesetPost",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDTemporalrulesetPost"));
    }
    // verify the required parameter 'temporalruleset' is set
    if (temporalruleset == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'temporalruleset' when calling v1AccountAccountIDTemporalrulesetPost",
        new ApiException(400, "Missing the required parameter 'temporalruleset' when calling v1AccountAccountIDTemporalrulesetPost"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/temporalruleset".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsTemporalRuleSetGetSingle) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsTemporalRuleSetGetSingle.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete Temporal Rule Set
  * Delete the temporal rule set from an account.
   * @param accountID Account ID, 32 alpha numeric
   * @param temporalRuleSetID temporal rule set ID, 32 alpha numeric
   * @return ServiceDocsTemporalRuleSetGetSingle
  */
  public ServiceDocsTemporalRuleSetGetSingle v1AccountAccountIDTemporalrulesetTemporalRuleSetIDDelete (String accountID, String temporalRuleSetID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDTemporalrulesetTemporalRuleSetIDDelete",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDTemporalrulesetTemporalRuleSetIDDelete"));
    }
    // verify the required parameter 'temporalRuleSetID' is set
    if (temporalRuleSetID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'temporalRuleSetID' when calling v1AccountAccountIDTemporalrulesetTemporalRuleSetIDDelete",
        new ApiException(400, "Missing the required parameter 'temporalRuleSetID' when calling v1AccountAccountIDTemporalrulesetTemporalRuleSetIDDelete"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/temporalruleset/{temporalRuleSetID}".replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "temporalRuleSetID" + "\\}", apiInvoker.escapeString(temporalRuleSetID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsTemporalRuleSetGetSingle) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsTemporalRuleSetGetSingle.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete Temporal Rule Set
   * Delete the temporal rule set from an account.
   * @param accountID Account ID, 32 alpha numeric   * @param temporalRuleSetID temporal rule set ID, 32 alpha numeric
  */
  public void v1AccountAccountIDTemporalrulesetTemporalRuleSetIDDelete (String accountID, String temporalRuleSetID, final Response.Listener<ServiceDocsTemporalRuleSetGetSingle> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDTemporalrulesetTemporalRuleSetIDDelete",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDTemporalrulesetTemporalRuleSetIDDelete"));
    }
    // verify the required parameter 'temporalRuleSetID' is set
    if (temporalRuleSetID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'temporalRuleSetID' when calling v1AccountAccountIDTemporalrulesetTemporalRuleSetIDDelete",
        new ApiException(400, "Missing the required parameter 'temporalRuleSetID' when calling v1AccountAccountIDTemporalrulesetTemporalRuleSetIDDelete"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/temporalruleset/{temporalRuleSetID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "temporalRuleSetID" + "\\}", apiInvoker.escapeString(temporalRuleSetID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsTemporalRuleSetGetSingle) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsTemporalRuleSetGetSingle.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Temporal Rule Set Details
  * Acquire details about a temporal rule set in an account.
   * @param accountID Account ID, 32 alpha numeric
   * @param temporalRuleSetID Temporal Ruleset ID, 32 alpha numeric
   * @return ServiceDocsTemporalRuleSetGetSingle
  */
  public ServiceDocsTemporalRuleSetGetSingle v1AccountAccountIDTemporalrulesetTemporalRuleSetIDGet (String accountID, String temporalRuleSetID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDTemporalrulesetTemporalRuleSetIDGet",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDTemporalrulesetTemporalRuleSetIDGet"));
    }
    // verify the required parameter 'temporalRuleSetID' is set
    if (temporalRuleSetID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'temporalRuleSetID' when calling v1AccountAccountIDTemporalrulesetTemporalRuleSetIDGet",
        new ApiException(400, "Missing the required parameter 'temporalRuleSetID' when calling v1AccountAccountIDTemporalrulesetTemporalRuleSetIDGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/temporalruleset/{temporalRuleSetID}".replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "temporalRuleSetID" + "\\}", apiInvoker.escapeString(temporalRuleSetID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsTemporalRuleSetGetSingle) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsTemporalRuleSetGetSingle.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Temporal Rule Set Details
   * Acquire details about a temporal rule set in an account.
   * @param accountID Account ID, 32 alpha numeric   * @param temporalRuleSetID Temporal Ruleset ID, 32 alpha numeric
  */
  public void v1AccountAccountIDTemporalrulesetTemporalRuleSetIDGet (String accountID, String temporalRuleSetID, final Response.Listener<ServiceDocsTemporalRuleSetGetSingle> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDTemporalrulesetTemporalRuleSetIDGet",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDTemporalrulesetTemporalRuleSetIDGet"));
    }
    // verify the required parameter 'temporalRuleSetID' is set
    if (temporalRuleSetID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'temporalRuleSetID' when calling v1AccountAccountIDTemporalrulesetTemporalRuleSetIDGet",
        new ApiException(400, "Missing the required parameter 'temporalRuleSetID' when calling v1AccountAccountIDTemporalrulesetTemporalRuleSetIDGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/temporalruleset/{temporalRuleSetID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "temporalRuleSetID" + "\\}", apiInvoker.escapeString(temporalRuleSetID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsTemporalRuleSetGetSingle) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsTemporalRuleSetGetSingle.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update Temporal Rule Set
  * Efficiently adjust the temporal rule set in an account.
   * @param accountID Account ID, 32 alpha numeric
   * @param temporalRuleSetID Temporal Ruleset ID, 32 alpha numeric
   * @param reqBody payload fields
   * @return ServiceDocsTemporalRuleSetGetSingle
  */
  public ServiceDocsTemporalRuleSetGetSingle v1AccountAccountIDTemporalrulesetTemporalRuleSetIDPut (String accountID, String temporalRuleSetID, ServiceVOIPTemporalRuleSetAddEditData reqBody) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = reqBody;
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDTemporalrulesetTemporalRuleSetIDPut",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDTemporalrulesetTemporalRuleSetIDPut"));
    }
    // verify the required parameter 'temporalRuleSetID' is set
    if (temporalRuleSetID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'temporalRuleSetID' when calling v1AccountAccountIDTemporalrulesetTemporalRuleSetIDPut",
        new ApiException(400, "Missing the required parameter 'temporalRuleSetID' when calling v1AccountAccountIDTemporalrulesetTemporalRuleSetIDPut"));
    }
    // verify the required parameter 'reqBody' is set
    if (reqBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'reqBody' when calling v1AccountAccountIDTemporalrulesetTemporalRuleSetIDPut",
        new ApiException(400, "Missing the required parameter 'reqBody' when calling v1AccountAccountIDTemporalrulesetTemporalRuleSetIDPut"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/temporalruleset/{temporalRuleSetID}".replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "temporalRuleSetID" + "\\}", apiInvoker.escapeString(temporalRuleSetID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsTemporalRuleSetGetSingle) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsTemporalRuleSetGetSingle.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update Temporal Rule Set
   * Efficiently adjust the temporal rule set in an account.
   * @param accountID Account ID, 32 alpha numeric   * @param temporalRuleSetID Temporal Ruleset ID, 32 alpha numeric   * @param reqBody payload fields
  */
  public void v1AccountAccountIDTemporalrulesetTemporalRuleSetIDPut (String accountID, String temporalRuleSetID, ServiceVOIPTemporalRuleSetAddEditData reqBody, final Response.Listener<ServiceDocsTemporalRuleSetGetSingle> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = reqBody;

    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDTemporalrulesetTemporalRuleSetIDPut",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDTemporalrulesetTemporalRuleSetIDPut"));
    }
    // verify the required parameter 'temporalRuleSetID' is set
    if (temporalRuleSetID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'temporalRuleSetID' when calling v1AccountAccountIDTemporalrulesetTemporalRuleSetIDPut",
        new ApiException(400, "Missing the required parameter 'temporalRuleSetID' when calling v1AccountAccountIDTemporalrulesetTemporalRuleSetIDPut"));
    }
    // verify the required parameter 'reqBody' is set
    if (reqBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'reqBody' when calling v1AccountAccountIDTemporalrulesetTemporalRuleSetIDPut",
        new ApiException(400, "Missing the required parameter 'reqBody' when calling v1AccountAccountIDTemporalrulesetTemporalRuleSetIDPut"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/temporalruleset/{temporalRuleSetID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "temporalRuleSetID" + "\\}", apiInvoker.escapeString(temporalRuleSetID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsTemporalRuleSetGetSingle) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsTemporalRuleSetGetSingle.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
