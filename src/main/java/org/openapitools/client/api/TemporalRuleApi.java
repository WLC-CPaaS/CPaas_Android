/**
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.CPAASError;
import org.openapitools.client.model.ServiceDocsTemporalRuleGetAll;
import org.openapitools.client.model.ServiceDocsTemporalRuleGetSingle;
import org.openapitools.client.model.ServiceVOIPTemporalRuleAddEdit2;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class TemporalRuleApi {
  String basePath = "http://API_HOSTNAME";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Get Temporal Rule List
  * Access all temporal rules for an account.
   * @param accountID Account ID, 32 alpha numeric
   * @param startKey start_key for pagination that was returned as next_start_key from your previous call
   * @param pageSize number of records to return, range 1 to 50
   * @return ServiceDocsTemporalRuleGetAll
  */
  public ServiceDocsTemporalRuleGetAll v1AccountAccountIDTemporalruleGet (String accountID, String startKey, Integer pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDTemporalruleGet",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDTemporalruleGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/temporalrule".replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_key", startKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsTemporalRuleGetAll) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsTemporalRuleGetAll.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Temporal Rule List
   * Access all temporal rules for an account.
   * @param accountID Account ID, 32 alpha numeric   * @param startKey start_key for pagination that was returned as next_start_key from your previous call   * @param pageSize number of records to return, range 1 to 50
  */
  public void v1AccountAccountIDTemporalruleGet (String accountID, String startKey, Integer pageSize, final Response.Listener<ServiceDocsTemporalRuleGetAll> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDTemporalruleGet",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDTemporalruleGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/temporalrule".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_key", startKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsTemporalRuleGetAll) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsTemporalRuleGetAll.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create Temporal Rule
  * Create temporal rules for an account.
   * @param accountID Account ID, 32 alphanumeric
   * @param temporalrule payload fields
   * @return ServiceDocsTemporalRuleGetSingle
  */
  public ServiceDocsTemporalRuleGetSingle v1AccountAccountIDTemporalrulePost (String accountID, ServiceVOIPTemporalRuleAddEdit2 temporalrule) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = temporalrule;
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDTemporalrulePost",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDTemporalrulePost"));
    }
    // verify the required parameter 'temporalrule' is set
    if (temporalrule == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'temporalrule' when calling v1AccountAccountIDTemporalrulePost",
        new ApiException(400, "Missing the required parameter 'temporalrule' when calling v1AccountAccountIDTemporalrulePost"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/temporalrule".replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsTemporalRuleGetSingle) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsTemporalRuleGetSingle.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create Temporal Rule
   * Create temporal rules for an account.
   * @param accountID Account ID, 32 alphanumeric   * @param temporalrule payload fields
  */
  public void v1AccountAccountIDTemporalrulePost (String accountID, ServiceVOIPTemporalRuleAddEdit2 temporalrule, final Response.Listener<ServiceDocsTemporalRuleGetSingle> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = temporalrule;

    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDTemporalrulePost",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDTemporalrulePost"));
    }
    // verify the required parameter 'temporalrule' is set
    if (temporalrule == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'temporalrule' when calling v1AccountAccountIDTemporalrulePost",
        new ApiException(400, "Missing the required parameter 'temporalrule' when calling v1AccountAccountIDTemporalrulePost"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/temporalrule".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsTemporalRuleGetSingle) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsTemporalRuleGetSingle.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete Temporal Rule
  * Remove a temporal rule from an account.
   * @param accountID Account ID, 32 alpha numeric
   * @param temporalRuleID temporal rule ID, 32 alpha numeric
   * @return ServiceDocsTemporalRuleGetSingle
  */
  public ServiceDocsTemporalRuleGetSingle v1AccountAccountIDTemporalruleTemporalRuleIDDelete (String accountID, String temporalRuleID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDTemporalruleTemporalRuleIDDelete",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDTemporalruleTemporalRuleIDDelete"));
    }
    // verify the required parameter 'temporalRuleID' is set
    if (temporalRuleID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'temporalRuleID' when calling v1AccountAccountIDTemporalruleTemporalRuleIDDelete",
        new ApiException(400, "Missing the required parameter 'temporalRuleID' when calling v1AccountAccountIDTemporalruleTemporalRuleIDDelete"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/temporalrule/{temporalRuleID}".replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "temporalRuleID" + "\\}", apiInvoker.escapeString(temporalRuleID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsTemporalRuleGetSingle) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsTemporalRuleGetSingle.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete Temporal Rule
   * Remove a temporal rule from an account.
   * @param accountID Account ID, 32 alpha numeric   * @param temporalRuleID temporal rule ID, 32 alpha numeric
  */
  public void v1AccountAccountIDTemporalruleTemporalRuleIDDelete (String accountID, String temporalRuleID, final Response.Listener<ServiceDocsTemporalRuleGetSingle> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDTemporalruleTemporalRuleIDDelete",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDTemporalruleTemporalRuleIDDelete"));
    }
    // verify the required parameter 'temporalRuleID' is set
    if (temporalRuleID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'temporalRuleID' when calling v1AccountAccountIDTemporalruleTemporalRuleIDDelete",
        new ApiException(400, "Missing the required parameter 'temporalRuleID' when calling v1AccountAccountIDTemporalruleTemporalRuleIDDelete"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/temporalrule/{temporalRuleID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "temporalRuleID" + "\\}", apiInvoker.escapeString(temporalRuleID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsTemporalRuleGetSingle) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsTemporalRuleGetSingle.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Temporal Rule Details
  * View details about individual time rules.
   * @param accountID Account ID, 32 alpha numeric
   * @param temporalRuleID Temporal Rule ID, 32 alpha numeric
   * @return ServiceDocsTemporalRuleGetSingle
  */
  public ServiceDocsTemporalRuleGetSingle v1AccountAccountIDTemporalruleTemporalRuleIDGet (String accountID, String temporalRuleID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDTemporalruleTemporalRuleIDGet",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDTemporalruleTemporalRuleIDGet"));
    }
    // verify the required parameter 'temporalRuleID' is set
    if (temporalRuleID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'temporalRuleID' when calling v1AccountAccountIDTemporalruleTemporalRuleIDGet",
        new ApiException(400, "Missing the required parameter 'temporalRuleID' when calling v1AccountAccountIDTemporalruleTemporalRuleIDGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/temporalrule/{temporalRuleID}".replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "temporalRuleID" + "\\}", apiInvoker.escapeString(temporalRuleID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsTemporalRuleGetSingle) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsTemporalRuleGetSingle.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Temporal Rule Details
   * View details about individual time rules.
   * @param accountID Account ID, 32 alpha numeric   * @param temporalRuleID Temporal Rule ID, 32 alpha numeric
  */
  public void v1AccountAccountIDTemporalruleTemporalRuleIDGet (String accountID, String temporalRuleID, final Response.Listener<ServiceDocsTemporalRuleGetSingle> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDTemporalruleTemporalRuleIDGet",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDTemporalruleTemporalRuleIDGet"));
    }
    // verify the required parameter 'temporalRuleID' is set
    if (temporalRuleID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'temporalRuleID' when calling v1AccountAccountIDTemporalruleTemporalRuleIDGet",
        new ApiException(400, "Missing the required parameter 'temporalRuleID' when calling v1AccountAccountIDTemporalruleTemporalRuleIDGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/temporalrule/{temporalRuleID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "temporalRuleID" + "\\}", apiInvoker.escapeString(temporalRuleID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsTemporalRuleGetSingle) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsTemporalRuleGetSingle.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update Temporal Rule
  * Edit the existing temporal rules in an account.
   * @param accountID Account ID, 32 alpha numeric
   * @param temporalRuleID Temporal Rule ID, 32 alpha numeric
   * @param reqBody payload fields
   * @return ServiceDocsTemporalRuleGetSingle
  */
  public ServiceDocsTemporalRuleGetSingle v1AccountAccountIDTemporalruleTemporalRuleIDPut (String accountID, String temporalRuleID, ServiceVOIPTemporalRuleAddEdit2 reqBody) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = reqBody;
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDTemporalruleTemporalRuleIDPut",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDTemporalruleTemporalRuleIDPut"));
    }
    // verify the required parameter 'temporalRuleID' is set
    if (temporalRuleID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'temporalRuleID' when calling v1AccountAccountIDTemporalruleTemporalRuleIDPut",
        new ApiException(400, "Missing the required parameter 'temporalRuleID' when calling v1AccountAccountIDTemporalruleTemporalRuleIDPut"));
    }
    // verify the required parameter 'reqBody' is set
    if (reqBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'reqBody' when calling v1AccountAccountIDTemporalruleTemporalRuleIDPut",
        new ApiException(400, "Missing the required parameter 'reqBody' when calling v1AccountAccountIDTemporalruleTemporalRuleIDPut"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/temporalrule/{temporalRuleID}".replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "temporalRuleID" + "\\}", apiInvoker.escapeString(temporalRuleID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsTemporalRuleGetSingle) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsTemporalRuleGetSingle.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update Temporal Rule
   * Edit the existing temporal rules in an account.
   * @param accountID Account ID, 32 alpha numeric   * @param temporalRuleID Temporal Rule ID, 32 alpha numeric   * @param reqBody payload fields
  */
  public void v1AccountAccountIDTemporalruleTemporalRuleIDPut (String accountID, String temporalRuleID, ServiceVOIPTemporalRuleAddEdit2 reqBody, final Response.Listener<ServiceDocsTemporalRuleGetSingle> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = reqBody;

    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDTemporalruleTemporalRuleIDPut",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDTemporalruleTemporalRuleIDPut"));
    }
    // verify the required parameter 'temporalRuleID' is set
    if (temporalRuleID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'temporalRuleID' when calling v1AccountAccountIDTemporalruleTemporalRuleIDPut",
        new ApiException(400, "Missing the required parameter 'temporalRuleID' when calling v1AccountAccountIDTemporalruleTemporalRuleIDPut"));
    }
    // verify the required parameter 'reqBody' is set
    if (reqBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'reqBody' when calling v1AccountAccountIDTemporalruleTemporalRuleIDPut",
        new ApiException(400, "Missing the required parameter 'reqBody' when calling v1AccountAccountIDTemporalruleTemporalRuleIDPut"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/temporalrule/{temporalRuleID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "temporalRuleID" + "\\}", apiInvoker.escapeString(temporalRuleID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsTemporalRuleGetSingle) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsTemporalRuleGetSingle.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
