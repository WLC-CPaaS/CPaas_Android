/**
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.CPAASError;
import java.io.File;
import java.util.Map;
import org.openapitools.client.model.OasAnyTypeNotMapped;
import org.openapitools.client.model.ServiceDocsVoicemailGetAll;
import org.openapitools.client.model.ServiceDocsVoicemailGetSingle;
import org.openapitools.client.model.ServiceDocsVoicemailMessageGetAll;
import org.openapitools.client.model.ServiceDocsVoicemailMessageGetSingle;
import org.openapitools.client.model.ServiceVOIPVoicemailAddEditData;
import org.openapitools.client.model.ServiceVOIPVoicemailMessageAddData;
import org.openapitools.client.model.ServiceVOIPVoicemailMessageChange;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class VoicemailApi {
  String basePath = "http://api.beta.cpaaslabs.net";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Get Voicemail Box List
  * List all voicemail boxes in an account.
   * @param accountID Account ID, 32 alpha numeric
   * @param startKey start_key for pagination that was returned as next_start_key from your previous call
   * @param pageSize number of records to return, range 1 to 50
   * @return ServiceDocsVoicemailGetAll
  */
  public ServiceDocsVoicemailGetAll v1AccountAccountIDVoicemailGet (String accountID, String startKey, Integer pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDVoicemailGet",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDVoicemailGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/voicemail".replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_key", startKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsVoicemailGetAll) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsVoicemailGetAll.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Voicemail Box List
   * List all voicemail boxes in an account.
   * @param accountID Account ID, 32 alpha numeric   * @param startKey start_key for pagination that was returned as next_start_key from your previous call   * @param pageSize number of records to return, range 1 to 50
  */
  public void v1AccountAccountIDVoicemailGet (String accountID, String startKey, Integer pageSize, final Response.Listener<ServiceDocsVoicemailGetAll> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDVoicemailGet",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDVoicemailGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/voicemail".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_key", startKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsVoicemailGetAll) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsVoicemailGetAll.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create Voicemail Box
  * Create a voicemail box for receiving and storing voicemail messages.
   * @param accountID account ID, 32 alphanumeric
   * @param voicemail voicemail payload fields
   * @return ServiceDocsVoicemailGetSingle
  */
  public ServiceDocsVoicemailGetSingle v1AccountAccountIDVoicemailPost (String accountID, ServiceVOIPVoicemailAddEditData voicemail) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = voicemail;
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDVoicemailPost",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDVoicemailPost"));
    }
    // verify the required parameter 'voicemail' is set
    if (voicemail == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'voicemail' when calling v1AccountAccountIDVoicemailPost",
        new ApiException(400, "Missing the required parameter 'voicemail' when calling v1AccountAccountIDVoicemailPost"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/voicemail".replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsVoicemailGetSingle) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsVoicemailGetSingle.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create Voicemail Box
   * Create a voicemail box for receiving and storing voicemail messages.
   * @param accountID account ID, 32 alphanumeric   * @param voicemail voicemail payload fields
  */
  public void v1AccountAccountIDVoicemailPost (String accountID, ServiceVOIPVoicemailAddEditData voicemail, final Response.Listener<ServiceDocsVoicemailGetSingle> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = voicemail;

    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDVoicemailPost",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDVoicemailPost"));
    }
    // verify the required parameter 'voicemail' is set
    if (voicemail == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'voicemail' when calling v1AccountAccountIDVoicemailPost",
        new ApiException(400, "Missing the required parameter 'voicemail' when calling v1AccountAccountIDVoicemailPost"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/voicemail".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsVoicemailGetSingle) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsVoicemailGetSingle.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete Voicemail Box
  * Delete a voicemail box in an account.
   * @param accountID Account ID, 32 alpha numeric
   * @param voicemailID Voicemail ID, 32 alpha numeric
   * @return ServiceDocsVoicemailGetSingle
  */
  public ServiceDocsVoicemailGetSingle v1AccountAccountIDVoicemailVoicemailIDDelete (String accountID, String voicemailID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDVoicemailVoicemailIDDelete",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDVoicemailVoicemailIDDelete"));
    }
    // verify the required parameter 'voicemailID' is set
    if (voicemailID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'voicemailID' when calling v1AccountAccountIDVoicemailVoicemailIDDelete",
        new ApiException(400, "Missing the required parameter 'voicemailID' when calling v1AccountAccountIDVoicemailVoicemailIDDelete"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/voicemail/{voicemailID}".replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "voicemailID" + "\\}", apiInvoker.escapeString(voicemailID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsVoicemailGetSingle) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsVoicemailGetSingle.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete Voicemail Box
   * Delete a voicemail box in an account.
   * @param accountID Account ID, 32 alpha numeric   * @param voicemailID Voicemail ID, 32 alpha numeric
  */
  public void v1AccountAccountIDVoicemailVoicemailIDDelete (String accountID, String voicemailID, final Response.Listener<ServiceDocsVoicemailGetSingle> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDVoicemailVoicemailIDDelete",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDVoicemailVoicemailIDDelete"));
    }
    // verify the required parameter 'voicemailID' is set
    if (voicemailID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'voicemailID' when calling v1AccountAccountIDVoicemailVoicemailIDDelete",
        new ApiException(400, "Missing the required parameter 'voicemailID' when calling v1AccountAccountIDVoicemailVoicemailIDDelete"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/voicemail/{voicemailID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "voicemailID" + "\\}", apiInvoker.escapeString(voicemailID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsVoicemailGetSingle) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsVoicemailGetSingle.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Voicemail Box Details
  * Get information about a single voicemail box.
   * @param accountID Account ID, 32 alpha numeric
   * @param voicemailID Voicemail ID, 32 alpha numeric
   * @return ServiceDocsVoicemailGetSingle
  */
  public ServiceDocsVoicemailGetSingle v1AccountAccountIDVoicemailVoicemailIDGet (String accountID, String voicemailID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDVoicemailVoicemailIDGet",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDVoicemailVoicemailIDGet"));
    }
    // verify the required parameter 'voicemailID' is set
    if (voicemailID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'voicemailID' when calling v1AccountAccountIDVoicemailVoicemailIDGet",
        new ApiException(400, "Missing the required parameter 'voicemailID' when calling v1AccountAccountIDVoicemailVoicemailIDGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/voicemail/{voicemailID}".replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "voicemailID" + "\\}", apiInvoker.escapeString(voicemailID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsVoicemailGetSingle) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsVoicemailGetSingle.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Voicemail Box Details
   * Get information about a single voicemail box.
   * @param accountID Account ID, 32 alpha numeric   * @param voicemailID Voicemail ID, 32 alpha numeric
  */
  public void v1AccountAccountIDVoicemailVoicemailIDGet (String accountID, String voicemailID, final Response.Listener<ServiceDocsVoicemailGetSingle> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDVoicemailVoicemailIDGet",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDVoicemailVoicemailIDGet"));
    }
    // verify the required parameter 'voicemailID' is set
    if (voicemailID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'voicemailID' when calling v1AccountAccountIDVoicemailVoicemailIDGet",
        new ApiException(400, "Missing the required parameter 'voicemailID' when calling v1AccountAccountIDVoicemailVoicemailIDGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/voicemail/{voicemailID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "voicemailID" + "\\}", apiInvoker.escapeString(voicemailID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsVoicemailGetSingle) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsVoicemailGetSingle.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Voicemail Message List
  * Get a list of voicemail messages from an account&#39;s voicemail box.
   * @param accountID Account ID, 32 alpha numeric
   * @param voicemailID voicemail ID, 32 alpha numeric
   * @param startKey start_key for pagination that was returned as next_start_key from your previous call
   * @param pageSize number of records to return, range 1 to 50
   * @return ServiceDocsVoicemailMessageGetAll
  */
  public ServiceDocsVoicemailMessageGetAll v1AccountAccountIDVoicemailVoicemailIDMessageGet (String accountID, String voicemailID, String startKey, Integer pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageGet",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageGet"));
    }
    // verify the required parameter 'voicemailID' is set
    if (voicemailID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'voicemailID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageGet",
        new ApiException(400, "Missing the required parameter 'voicemailID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/voicemail/{voicemailID}/message".replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "voicemailID" + "\\}", apiInvoker.escapeString(voicemailID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_key", startKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsVoicemailMessageGetAll) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsVoicemailMessageGetAll.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Voicemail Message List
   * Get a list of voicemail messages from an account&#39;s voicemail box.
   * @param accountID Account ID, 32 alpha numeric   * @param voicemailID voicemail ID, 32 alpha numeric   * @param startKey start_key for pagination that was returned as next_start_key from your previous call   * @param pageSize number of records to return, range 1 to 50
  */
  public void v1AccountAccountIDVoicemailVoicemailIDMessageGet (String accountID, String voicemailID, String startKey, Integer pageSize, final Response.Listener<ServiceDocsVoicemailMessageGetAll> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageGet",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageGet"));
    }
    // verify the required parameter 'voicemailID' is set
    if (voicemailID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'voicemailID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageGet",
        new ApiException(400, "Missing the required parameter 'voicemailID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/voicemail/{voicemailID}/message".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "voicemailID" + "\\}", apiInvoker.escapeString(voicemailID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_key", startKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsVoicemailMessageGetAll) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsVoicemailMessageGetAll.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete Voicemail Message
  * Delete a voicemail message from a voicemail box in an account.
   * @param accountID Account ID, 32 alpha numeric
   * @param voicemailID Voicemail ID, 32 alpha numeric
   * @param messageID message ID, 32 alpha numeric
   * @return ServiceDocsVoicemailMessageGetSingle
  */
  public ServiceDocsVoicemailMessageGetSingle v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDDelete (String accountID, String voicemailID, String messageID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDDelete",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDDelete"));
    }
    // verify the required parameter 'voicemailID' is set
    if (voicemailID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'voicemailID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDDelete",
        new ApiException(400, "Missing the required parameter 'voicemailID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDDelete"));
    }
    // verify the required parameter 'messageID' is set
    if (messageID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'messageID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDDelete",
        new ApiException(400, "Missing the required parameter 'messageID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDDelete"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/voicemail/{voicemailID}/message/{messageID}".replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "voicemailID" + "\\}", apiInvoker.escapeString(voicemailID.toString())).replaceAll("\\{" + "messageID" + "\\}", apiInvoker.escapeString(messageID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsVoicemailMessageGetSingle) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsVoicemailMessageGetSingle.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete Voicemail Message
   * Delete a voicemail message from a voicemail box in an account.
   * @param accountID Account ID, 32 alpha numeric   * @param voicemailID Voicemail ID, 32 alpha numeric   * @param messageID message ID, 32 alpha numeric
  */
  public void v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDDelete (String accountID, String voicemailID, String messageID, final Response.Listener<ServiceDocsVoicemailMessageGetSingle> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDDelete",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDDelete"));
    }
    // verify the required parameter 'voicemailID' is set
    if (voicemailID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'voicemailID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDDelete",
        new ApiException(400, "Missing the required parameter 'voicemailID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDDelete"));
    }
    // verify the required parameter 'messageID' is set
    if (messageID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'messageID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDDelete",
        new ApiException(400, "Missing the required parameter 'messageID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDDelete"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/voicemail/{voicemailID}/message/{messageID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "voicemailID" + "\\}", apiInvoker.escapeString(voicemailID.toString())).replaceAll("\\{" + "messageID" + "\\}", apiInvoker.escapeString(messageID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsVoicemailMessageGetSingle) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsVoicemailMessageGetSingle.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Voicemail Message Details
  * Retrieve the container details of an individual voicemail message. This includes a reference to the audio file, but not the message itself.
   * @param accountID Account ID, 32 alpha numeric
   * @param voicemailID Voicemail ID, 32 alpha numeric
   * @param messageID Message ID, 39 (yyyymm-&lt;32 id&gt;)
   * @return ServiceDocsVoicemailMessageGetSingle
  */
  public ServiceDocsVoicemailMessageGetSingle v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDGet (String accountID, String voicemailID, String messageID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDGet",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDGet"));
    }
    // verify the required parameter 'voicemailID' is set
    if (voicemailID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'voicemailID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDGet",
        new ApiException(400, "Missing the required parameter 'voicemailID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDGet"));
    }
    // verify the required parameter 'messageID' is set
    if (messageID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'messageID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDGet",
        new ApiException(400, "Missing the required parameter 'messageID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/voicemail/{voicemailID}/message/{messageID}".replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "voicemailID" + "\\}", apiInvoker.escapeString(voicemailID.toString())).replaceAll("\\{" + "messageID" + "\\}", apiInvoker.escapeString(messageID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsVoicemailMessageGetSingle) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsVoicemailMessageGetSingle.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Voicemail Message Details
   * Retrieve the container details of an individual voicemail message. This includes a reference to the audio file, but not the message itself.
   * @param accountID Account ID, 32 alpha numeric   * @param voicemailID Voicemail ID, 32 alpha numeric   * @param messageID Message ID, 39 (yyyymm-&lt;32 id&gt;)
  */
  public void v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDGet (String accountID, String voicemailID, String messageID, final Response.Listener<ServiceDocsVoicemailMessageGetSingle> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDGet",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDGet"));
    }
    // verify the required parameter 'voicemailID' is set
    if (voicemailID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'voicemailID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDGet",
        new ApiException(400, "Missing the required parameter 'voicemailID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDGet"));
    }
    // verify the required parameter 'messageID' is set
    if (messageID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'messageID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDGet",
        new ApiException(400, "Missing the required parameter 'messageID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/voicemail/{voicemailID}/message/{messageID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "voicemailID" + "\\}", apiInvoker.escapeString(voicemailID.toString())).replaceAll("\\{" + "messageID" + "\\}", apiInvoker.escapeString(messageID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsVoicemailMessageGetSingle) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsVoicemailMessageGetSingle.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update Voicemail Message
  * Copy or move a voicemail message to a different folder in the same voicemail box or move the message to a separate voicemail box.
   * @param accountID Account ID, 32 alpha numeric
   * @param voicemailID Voicemail ID, 32 alpha numeric
   * @param messageID Message ID, 39 (yyyymm-&lt;32 id&gt;)
   * @param reqBody payload fields
   * @return ServiceDocsVoicemailMessageGetSingle
  */
  public ServiceDocsVoicemailMessageGetSingle v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPut (String accountID, String voicemailID, String messageID, ServiceVOIPVoicemailMessageChange reqBody) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = reqBody;
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPut",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPut"));
    }
    // verify the required parameter 'voicemailID' is set
    if (voicemailID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'voicemailID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPut",
        new ApiException(400, "Missing the required parameter 'voicemailID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPut"));
    }
    // verify the required parameter 'messageID' is set
    if (messageID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'messageID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPut",
        new ApiException(400, "Missing the required parameter 'messageID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPut"));
    }
    // verify the required parameter 'reqBody' is set
    if (reqBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'reqBody' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPut",
        new ApiException(400, "Missing the required parameter 'reqBody' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPut"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/voicemail/{voicemailID}/message/{messageID}".replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "voicemailID" + "\\}", apiInvoker.escapeString(voicemailID.toString())).replaceAll("\\{" + "messageID" + "\\}", apiInvoker.escapeString(messageID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsVoicemailMessageGetSingle) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsVoicemailMessageGetSingle.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update Voicemail Message
   * Copy or move a voicemail message to a different folder in the same voicemail box or move the message to a separate voicemail box.
   * @param accountID Account ID, 32 alpha numeric   * @param voicemailID Voicemail ID, 32 alpha numeric   * @param messageID Message ID, 39 (yyyymm-&lt;32 id&gt;)   * @param reqBody payload fields
  */
  public void v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPut (String accountID, String voicemailID, String messageID, ServiceVOIPVoicemailMessageChange reqBody, final Response.Listener<ServiceDocsVoicemailMessageGetSingle> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = reqBody;

    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPut",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPut"));
    }
    // verify the required parameter 'voicemailID' is set
    if (voicemailID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'voicemailID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPut",
        new ApiException(400, "Missing the required parameter 'voicemailID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPut"));
    }
    // verify the required parameter 'messageID' is set
    if (messageID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'messageID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPut",
        new ApiException(400, "Missing the required parameter 'messageID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPut"));
    }
    // verify the required parameter 'reqBody' is set
    if (reqBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'reqBody' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPut",
        new ApiException(400, "Missing the required parameter 'reqBody' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPut"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/voicemail/{voicemailID}/message/{messageID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "voicemailID" + "\\}", apiInvoker.escapeString(voicemailID.toString())).replaceAll("\\{" + "messageID" + "\\}", apiInvoker.escapeString(messageID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsVoicemailMessageGetSingle) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsVoicemailMessageGetSingle.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Voicemail Message File
  * Get the original audio content of a specific voicemail message identified by its unique ID within an account&#39;s voicemail box. URL Param \&quot;voicemailID\&quot; is a unique 32-character alphanumeric identifier assigned by the system, which refers to a specific voicemail box. URL Param \&quot;messageID\&quot; is a unique 32-character alphanumeric identifier assigned by the system, which refers to a specific message within a voicemail box.
   * @param accountID Account ID, unique 32-character alphanumeric identifier
   * @param voicemailID Voicemail Box ID, unique 32-character alphanumeric identifier
   * @param messageID Message ID, unique 32-character alphanumeric identifier
   * @return File
  */
  public File v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawGet (String accountID, String voicemailID, String messageID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawGet",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawGet"));
    }
    // verify the required parameter 'voicemailID' is set
    if (voicemailID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'voicemailID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawGet",
        new ApiException(400, "Missing the required parameter 'voicemailID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawGet"));
    }
    // verify the required parameter 'messageID' is set
    if (messageID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'messageID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawGet",
        new ApiException(400, "Missing the required parameter 'messageID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/voicemail/{voicemailID}/message/{messageID}/raw".replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "voicemailID" + "\\}", apiInvoker.escapeString(voicemailID.toString())).replaceAll("\\{" + "messageID" + "\\}", apiInvoker.escapeString(messageID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (File) ApiInvoker.deserialize(localVarResponse, "", File.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Voicemail Message File
   * Get the original audio content of a specific voicemail message identified by its unique ID within an account&#39;s voicemail box. URL Param \&quot;voicemailID\&quot; is a unique 32-character alphanumeric identifier assigned by the system, which refers to a specific voicemail box. URL Param \&quot;messageID\&quot; is a unique 32-character alphanumeric identifier assigned by the system, which refers to a specific message within a voicemail box.
   * @param accountID Account ID, unique 32-character alphanumeric identifier   * @param voicemailID Voicemail Box ID, unique 32-character alphanumeric identifier   * @param messageID Message ID, unique 32-character alphanumeric identifier
  */
  public void v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawGet (String accountID, String voicemailID, String messageID, final Response.Listener<File> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawGet",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawGet"));
    }
    // verify the required parameter 'voicemailID' is set
    if (voicemailID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'voicemailID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawGet",
        new ApiException(400, "Missing the required parameter 'voicemailID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawGet"));
    }
    // verify the required parameter 'messageID' is set
    if (messageID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'messageID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawGet",
        new ApiException(400, "Missing the required parameter 'messageID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/voicemail/{voicemailID}/message/{messageID}/raw".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "voicemailID" + "\\}", apiInvoker.escapeString(voicemailID.toString())).replaceAll("\\{" + "messageID" + "\\}", apiInvoker.escapeString(messageID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((File) ApiInvoker.deserialize(localVarResponse,  "", File.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Add Voicemail Message File
  * Associate an audio recording file with the voicemail to fully complete the message.
   * @param accountID Account ID, 32 alphanumeric characters
   * @param voicemailID Voicemail ID, 32 alphanumeric characters
   * @param messageID Message ID, 32 alphanumeric characters
   * @param file Audio file to upload
   * @return Map<String, OasAnyTypeNotMapped>
  */
  public Map<String, OasAnyTypeNotMapped> v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPost (String accountID, String voicemailID, String messageID, File file) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPost",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPost"));
    }
    // verify the required parameter 'voicemailID' is set
    if (voicemailID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'voicemailID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPost",
        new ApiException(400, "Missing the required parameter 'voicemailID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPost"));
    }
    // verify the required parameter 'messageID' is set
    if (messageID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'messageID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPost",
        new ApiException(400, "Missing the required parameter 'messageID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPost"));
    }
    // verify the required parameter 'file' is set
    if (file == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'file' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPost",
        new ApiException(400, "Missing the required parameter 'file' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPost"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/voicemail/{voicemailID}/message/{messageID}/raw".replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "voicemailID" + "\\}", apiInvoker.escapeString(voicemailID.toString())).replaceAll("\\{" + "messageID" + "\\}", apiInvoker.escapeString(messageID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (file != null) {
        localVarBuilder.addBinaryBody("file", file);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Map<String, OasAnyTypeNotMapped>) ApiInvoker.deserialize(localVarResponse, "map", OasAnyTypeNotMapped.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Add Voicemail Message File
   * Associate an audio recording file with the voicemail to fully complete the message.
   * @param accountID Account ID, 32 alphanumeric characters   * @param voicemailID Voicemail ID, 32 alphanumeric characters   * @param messageID Message ID, 32 alphanumeric characters   * @param file Audio file to upload
  */
  public void v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPost (String accountID, String voicemailID, String messageID, File file, final Response.Listener<Map<String, OasAnyTypeNotMapped>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPost",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPost"));
    }
    // verify the required parameter 'voicemailID' is set
    if (voicemailID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'voicemailID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPost",
        new ApiException(400, "Missing the required parameter 'voicemailID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPost"));
    }
    // verify the required parameter 'messageID' is set
    if (messageID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'messageID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPost",
        new ApiException(400, "Missing the required parameter 'messageID' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPost"));
    }
    // verify the required parameter 'file' is set
    if (file == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'file' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPost",
        new ApiException(400, "Missing the required parameter 'file' when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPost"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/voicemail/{voicemailID}/message/{messageID}/raw".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "voicemailID" + "\\}", apiInvoker.escapeString(voicemailID.toString())).replaceAll("\\{" + "messageID" + "\\}", apiInvoker.escapeString(messageID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (file != null) {
        localVarBuilder.addBinaryBody("file", file);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Map<String, OasAnyTypeNotMapped>) ApiInvoker.deserialize(localVarResponse,  "map", OasAnyTypeNotMapped.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create Voicemail Message
  * Create the container information for a recorded voicemail message in a voicemail box.
   * @param accountID account ID, 32 alphanumeric
   * @param voicemailID voicemail ID, 32 alphanumeric
   * @param message voicemail message payload fields
   * @return ServiceDocsVoicemailMessageGetSingle
  */
  public ServiceDocsVoicemailMessageGetSingle v1AccountAccountIDVoicemailVoicemailIDMessagePost (String accountID, String voicemailID, ServiceVOIPVoicemailMessageAddData message) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = message;
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDVoicemailVoicemailIDMessagePost",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDVoicemailVoicemailIDMessagePost"));
    }
    // verify the required parameter 'voicemailID' is set
    if (voicemailID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'voicemailID' when calling v1AccountAccountIDVoicemailVoicemailIDMessagePost",
        new ApiException(400, "Missing the required parameter 'voicemailID' when calling v1AccountAccountIDVoicemailVoicemailIDMessagePost"));
    }
    // verify the required parameter 'message' is set
    if (message == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'message' when calling v1AccountAccountIDVoicemailVoicemailIDMessagePost",
        new ApiException(400, "Missing the required parameter 'message' when calling v1AccountAccountIDVoicemailVoicemailIDMessagePost"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/voicemail/{voicemailID}/message".replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "voicemailID" + "\\}", apiInvoker.escapeString(voicemailID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsVoicemailMessageGetSingle) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsVoicemailMessageGetSingle.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create Voicemail Message
   * Create the container information for a recorded voicemail message in a voicemail box.
   * @param accountID account ID, 32 alphanumeric   * @param voicemailID voicemail ID, 32 alphanumeric   * @param message voicemail message payload fields
  */
  public void v1AccountAccountIDVoicemailVoicemailIDMessagePost (String accountID, String voicemailID, ServiceVOIPVoicemailMessageAddData message, final Response.Listener<ServiceDocsVoicemailMessageGetSingle> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = message;

    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDVoicemailVoicemailIDMessagePost",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDVoicemailVoicemailIDMessagePost"));
    }
    // verify the required parameter 'voicemailID' is set
    if (voicemailID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'voicemailID' when calling v1AccountAccountIDVoicemailVoicemailIDMessagePost",
        new ApiException(400, "Missing the required parameter 'voicemailID' when calling v1AccountAccountIDVoicemailVoicemailIDMessagePost"));
    }
    // verify the required parameter 'message' is set
    if (message == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'message' when calling v1AccountAccountIDVoicemailVoicemailIDMessagePost",
        new ApiException(400, "Missing the required parameter 'message' when calling v1AccountAccountIDVoicemailVoicemailIDMessagePost"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/voicemail/{voicemailID}/message".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "voicemailID" + "\\}", apiInvoker.escapeString(voicemailID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsVoicemailMessageGetSingle) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsVoicemailMessageGetSingle.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update Voicemail Box
  * Update the settings in an individual voicemail box, such as the owner, PIN, etc.
   * @param accountID Account ID, 32 alpha numeric
   * @param voicemailID Voicemail ID, 32 alpha numeric
   * @param reqBody payload fields
   * @return ServiceDocsVoicemailGetSingle
  */
  public ServiceDocsVoicemailGetSingle v1AccountAccountIDVoicemailVoicemailIDPut (String accountID, String voicemailID, ServiceVOIPVoicemailAddEditData reqBody) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = reqBody;
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDVoicemailVoicemailIDPut",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDVoicemailVoicemailIDPut"));
    }
    // verify the required parameter 'voicemailID' is set
    if (voicemailID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'voicemailID' when calling v1AccountAccountIDVoicemailVoicemailIDPut",
        new ApiException(400, "Missing the required parameter 'voicemailID' when calling v1AccountAccountIDVoicemailVoicemailIDPut"));
    }
    // verify the required parameter 'reqBody' is set
    if (reqBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'reqBody' when calling v1AccountAccountIDVoicemailVoicemailIDPut",
        new ApiException(400, "Missing the required parameter 'reqBody' when calling v1AccountAccountIDVoicemailVoicemailIDPut"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/voicemail/{voicemailID}".replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "voicemailID" + "\\}", apiInvoker.escapeString(voicemailID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsVoicemailGetSingle) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsVoicemailGetSingle.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update Voicemail Box
   * Update the settings in an individual voicemail box, such as the owner, PIN, etc.
   * @param accountID Account ID, 32 alpha numeric   * @param voicemailID Voicemail ID, 32 alpha numeric   * @param reqBody payload fields
  */
  public void v1AccountAccountIDVoicemailVoicemailIDPut (String accountID, String voicemailID, ServiceVOIPVoicemailAddEditData reqBody, final Response.Listener<ServiceDocsVoicemailGetSingle> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = reqBody;

    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDVoicemailVoicemailIDPut",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDVoicemailVoicemailIDPut"));
    }
    // verify the required parameter 'voicemailID' is set
    if (voicemailID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'voicemailID' when calling v1AccountAccountIDVoicemailVoicemailIDPut",
        new ApiException(400, "Missing the required parameter 'voicemailID' when calling v1AccountAccountIDVoicemailVoicemailIDPut"));
    }
    // verify the required parameter 'reqBody' is set
    if (reqBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'reqBody' when calling v1AccountAccountIDVoicemailVoicemailIDPut",
        new ApiException(400, "Missing the required parameter 'reqBody' when calling v1AccountAccountIDVoicemailVoicemailIDPut"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/voicemail/{voicemailID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "voicemailID" + "\\}", apiInvoker.escapeString(voicemailID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsVoicemailGetSingle) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsVoicemailGetSingle.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
