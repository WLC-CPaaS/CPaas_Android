/**
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.CPAASError;
import java.io.File;
import org.openapitools.client.model.ModelsGenerateConfigFileRequest;
import org.openapitools.client.model.ProvisioningDocsDocsBrandOutputSingle;
import org.openapitools.client.model.ProvisioningDocsDocsBrandsOutput;
import org.openapitools.client.model.ProvisioningDocsDocsConfigFileOutput;
import org.openapitools.client.model.ProvisioningDocsDocsFamilyOutput;
import org.openapitools.client.model.ProvisioningDocsDocsFamilyOutputSingle;
import org.openapitools.client.model.ProvisioningDocsDocsModelOutput;
import org.openapitools.client.model.ProvisioningDocsDocsModelOutputSingle;
import org.openapitools.client.model.ProvisioningDocsDocsTemplateOutputSingle;
import org.openapitools.client.model.ProvisioningDocsDocsTemplatesOutput;
import org.openapitools.client.model.ResponseProvisionError;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class ProvisioningApi {
  String basePath = "http://api.beta.cpaaslabs.net";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Get Config File Details
  * Retrieve the configuration details (e.g., settings and parameters) for a device.
   * @param accountID Account ID, 32 alpha numeric
   * @param filename Name of config file
   * @return File
  */
  public File v1AccountAccountIDProvisionFilenameGet (String accountID, String filename) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDProvisionFilenameGet",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDProvisionFilenameGet"));
    }
    // verify the required parameter 'filename' is set
    if (filename == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'filename' when calling v1AccountAccountIDProvisionFilenameGet",
        new ApiException(400, "Missing the required parameter 'filename' when calling v1AccountAccountIDProvisionFilenameGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/provision/{filename}".replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "filename" + "\\}", apiInvoker.escapeString(filename.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (File) ApiInvoker.deserialize(localVarResponse, "", File.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Config File Details
   * Retrieve the configuration details (e.g., settings and parameters) for a device.
   * @param accountID Account ID, 32 alpha numeric   * @param filename Name of config file
  */
  public void v1AccountAccountIDProvisionFilenameGet (String accountID, String filename, final Response.Listener<File> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDProvisionFilenameGet",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDProvisionFilenameGet"));
    }
    // verify the required parameter 'filename' is set
    if (filename == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'filename' when calling v1AccountAccountIDProvisionFilenameGet",
        new ApiException(400, "Missing the required parameter 'filename' when calling v1AccountAccountIDProvisionFilenameGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/provision/{filename}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "filename" + "\\}", apiInvoker.escapeString(filename.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((File) ApiInvoker.deserialize(localVarResponse,  "", File.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Family Details
  * Retrieve a family&#39;s details by the randomly generated ID.
   * @param brand brand
   * @param family family
   * @return ProvisioningDocsDocsFamilyOutputSingle
  */
  public ProvisioningDocsDocsFamilyOutputSingle v1ApBrandBrandFamilyFamilyGet (String brand, String family) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'brand' is set
    if (brand == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'brand' when calling v1ApBrandBrandFamilyFamilyGet",
        new ApiException(400, "Missing the required parameter 'brand' when calling v1ApBrandBrandFamilyFamilyGet"));
    }
    // verify the required parameter 'family' is set
    if (family == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'family' when calling v1ApBrandBrandFamilyFamilyGet",
        new ApiException(400, "Missing the required parameter 'family' when calling v1ApBrandBrandFamilyFamilyGet"));
    }

    // create path and map variables
    String path = "/v1/ap/brand/{brand}/family/{family}".replaceAll("\\{" + "brand" + "\\}", apiInvoker.escapeString(brand.toString())).replaceAll("\\{" + "family" + "\\}", apiInvoker.escapeString(family.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ProvisioningDocsDocsFamilyOutputSingle) ApiInvoker.deserialize(localVarResponse, "", ProvisioningDocsDocsFamilyOutputSingle.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Family Details
   * Retrieve a family&#39;s details by the randomly generated ID.
   * @param brand brand   * @param family family
  */
  public void v1ApBrandBrandFamilyFamilyGet (String brand, String family, final Response.Listener<ProvisioningDocsDocsFamilyOutputSingle> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'brand' is set
    if (brand == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'brand' when calling v1ApBrandBrandFamilyFamilyGet",
        new ApiException(400, "Missing the required parameter 'brand' when calling v1ApBrandBrandFamilyFamilyGet"));
    }
    // verify the required parameter 'family' is set
    if (family == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'family' when calling v1ApBrandBrandFamilyFamilyGet",
        new ApiException(400, "Missing the required parameter 'family' when calling v1ApBrandBrandFamilyFamilyGet"));
    }

    // create path and map variables
    String path = "/v1/ap/brand/{brand}/family/{family}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "brand" + "\\}", apiInvoker.escapeString(brand.toString())).replaceAll("\\{" + "family" + "\\}", apiInvoker.escapeString(family.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ProvisioningDocsDocsFamilyOutputSingle) ApiInvoker.deserialize(localVarResponse,  "", ProvisioningDocsDocsFamilyOutputSingle.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Model List
  * Retrieve a list of all models within a family for a brand (e.g., Yealink and Polycom).
   * @param brand brand
   * @param family family
   * @param modelName 
   * @param pageSize 
   * @param startKey 
   * @param status 
   * @return ProvisioningDocsDocsModelOutput
  */
  public ProvisioningDocsDocsModelOutput v1ApBrandBrandFamilyFamilyModelGet (String brand, String family, String modelName, Integer pageSize, String startKey, String status) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'brand' is set
    if (brand == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'brand' when calling v1ApBrandBrandFamilyFamilyModelGet",
        new ApiException(400, "Missing the required parameter 'brand' when calling v1ApBrandBrandFamilyFamilyModelGet"));
    }
    // verify the required parameter 'family' is set
    if (family == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'family' when calling v1ApBrandBrandFamilyFamilyModelGet",
        new ApiException(400, "Missing the required parameter 'family' when calling v1ApBrandBrandFamilyFamilyModelGet"));
    }

    // create path and map variables
    String path = "/v1/ap/brand/{brand}/family/{family}/model".replaceAll("\\{" + "brand" + "\\}", apiInvoker.escapeString(brand.toString())).replaceAll("\\{" + "family" + "\\}", apiInvoker.escapeString(family.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "model_name", modelName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_key", startKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "status", status));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ProvisioningDocsDocsModelOutput) ApiInvoker.deserialize(localVarResponse, "", ProvisioningDocsDocsModelOutput.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Model List
   * Retrieve a list of all models within a family for a brand (e.g., Yealink and Polycom).
   * @param brand brand   * @param family family   * @param modelName    * @param pageSize    * @param startKey    * @param status 
  */
  public void v1ApBrandBrandFamilyFamilyModelGet (String brand, String family, String modelName, Integer pageSize, String startKey, String status, final Response.Listener<ProvisioningDocsDocsModelOutput> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'brand' is set
    if (brand == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'brand' when calling v1ApBrandBrandFamilyFamilyModelGet",
        new ApiException(400, "Missing the required parameter 'brand' when calling v1ApBrandBrandFamilyFamilyModelGet"));
    }
    // verify the required parameter 'family' is set
    if (family == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'family' when calling v1ApBrandBrandFamilyFamilyModelGet",
        new ApiException(400, "Missing the required parameter 'family' when calling v1ApBrandBrandFamilyFamilyModelGet"));
    }

    // create path and map variables
    String path = "/v1/ap/brand/{brand}/family/{family}/model".replaceAll("\\{format\\}","json").replaceAll("\\{" + "brand" + "\\}", apiInvoker.escapeString(brand.toString())).replaceAll("\\{" + "family" + "\\}", apiInvoker.escapeString(family.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "model_name", modelName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_key", startKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "status", status));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ProvisioningDocsDocsModelOutput) ApiInvoker.deserialize(localVarResponse,  "", ProvisioningDocsDocsModelOutput.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Model Details
  * Retrieve a model&#39;s details by the randomly generated ID.
   * @param brand brand
   * @param family family
   * @param model model
   * @return ProvisioningDocsDocsModelOutputSingle
  */
  public ProvisioningDocsDocsModelOutputSingle v1ApBrandBrandFamilyFamilyModelModelGet (String brand, String family, String model) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'brand' is set
    if (brand == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'brand' when calling v1ApBrandBrandFamilyFamilyModelModelGet",
        new ApiException(400, "Missing the required parameter 'brand' when calling v1ApBrandBrandFamilyFamilyModelModelGet"));
    }
    // verify the required parameter 'family' is set
    if (family == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'family' when calling v1ApBrandBrandFamilyFamilyModelModelGet",
        new ApiException(400, "Missing the required parameter 'family' when calling v1ApBrandBrandFamilyFamilyModelModelGet"));
    }
    // verify the required parameter 'model' is set
    if (model == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'model' when calling v1ApBrandBrandFamilyFamilyModelModelGet",
        new ApiException(400, "Missing the required parameter 'model' when calling v1ApBrandBrandFamilyFamilyModelModelGet"));
    }

    // create path and map variables
    String path = "/v1/ap/brand/{brand}/family/{family}/model/{model}".replaceAll("\\{" + "brand" + "\\}", apiInvoker.escapeString(brand.toString())).replaceAll("\\{" + "family" + "\\}", apiInvoker.escapeString(family.toString())).replaceAll("\\{" + "model" + "\\}", apiInvoker.escapeString(model.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ProvisioningDocsDocsModelOutputSingle) ApiInvoker.deserialize(localVarResponse, "", ProvisioningDocsDocsModelOutputSingle.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Model Details
   * Retrieve a model&#39;s details by the randomly generated ID.
   * @param brand brand   * @param family family   * @param model model
  */
  public void v1ApBrandBrandFamilyFamilyModelModelGet (String brand, String family, String model, final Response.Listener<ProvisioningDocsDocsModelOutputSingle> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'brand' is set
    if (brand == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'brand' when calling v1ApBrandBrandFamilyFamilyModelModelGet",
        new ApiException(400, "Missing the required parameter 'brand' when calling v1ApBrandBrandFamilyFamilyModelModelGet"));
    }
    // verify the required parameter 'family' is set
    if (family == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'family' when calling v1ApBrandBrandFamilyFamilyModelModelGet",
        new ApiException(400, "Missing the required parameter 'family' when calling v1ApBrandBrandFamilyFamilyModelModelGet"));
    }
    // verify the required parameter 'model' is set
    if (model == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'model' when calling v1ApBrandBrandFamilyFamilyModelModelGet",
        new ApiException(400, "Missing the required parameter 'model' when calling v1ApBrandBrandFamilyFamilyModelModelGet"));
    }

    // create path and map variables
    String path = "/v1/ap/brand/{brand}/family/{family}/model/{model}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "brand" + "\\}", apiInvoker.escapeString(brand.toString())).replaceAll("\\{" + "family" + "\\}", apiInvoker.escapeString(family.toString())).replaceAll("\\{" + "model" + "\\}", apiInvoker.escapeString(model.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ProvisioningDocsDocsModelOutputSingle) ApiInvoker.deserialize(localVarResponse,  "", ProvisioningDocsDocsModelOutputSingle.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Template List
  * Retrieve a list of all templates for a model within a brand (e.g., Yealink and Polycom).
   * @param brand brand
   * @param family family
   * @param model model
   * @param firmware 
   * @param pageSize 
   * @param startKey 
   * @param status 
   * @param templateName 
   * @return ProvisioningDocsDocsTemplatesOutput
  */
  public ProvisioningDocsDocsTemplatesOutput v1ApBrandBrandFamilyFamilyModelModelTemplateGet (String brand, String family, String model, String firmware, Integer pageSize, String startKey, String status, String templateName) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'brand' is set
    if (brand == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'brand' when calling v1ApBrandBrandFamilyFamilyModelModelTemplateGet",
        new ApiException(400, "Missing the required parameter 'brand' when calling v1ApBrandBrandFamilyFamilyModelModelTemplateGet"));
    }
    // verify the required parameter 'family' is set
    if (family == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'family' when calling v1ApBrandBrandFamilyFamilyModelModelTemplateGet",
        new ApiException(400, "Missing the required parameter 'family' when calling v1ApBrandBrandFamilyFamilyModelModelTemplateGet"));
    }
    // verify the required parameter 'model' is set
    if (model == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'model' when calling v1ApBrandBrandFamilyFamilyModelModelTemplateGet",
        new ApiException(400, "Missing the required parameter 'model' when calling v1ApBrandBrandFamilyFamilyModelModelTemplateGet"));
    }

    // create path and map variables
    String path = "/v1/ap/brand/{brand}/family/{family}/model/{model}/template".replaceAll("\\{" + "brand" + "\\}", apiInvoker.escapeString(brand.toString())).replaceAll("\\{" + "family" + "\\}", apiInvoker.escapeString(family.toString())).replaceAll("\\{" + "model" + "\\}", apiInvoker.escapeString(model.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "firmware", firmware));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_key", startKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "status", status));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "template_name", templateName));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ProvisioningDocsDocsTemplatesOutput) ApiInvoker.deserialize(localVarResponse, "", ProvisioningDocsDocsTemplatesOutput.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Template List
   * Retrieve a list of all templates for a model within a brand (e.g., Yealink and Polycom).
   * @param brand brand   * @param family family   * @param model model   * @param firmware    * @param pageSize    * @param startKey    * @param status    * @param templateName 
  */
  public void v1ApBrandBrandFamilyFamilyModelModelTemplateGet (String brand, String family, String model, String firmware, Integer pageSize, String startKey, String status, String templateName, final Response.Listener<ProvisioningDocsDocsTemplatesOutput> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'brand' is set
    if (brand == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'brand' when calling v1ApBrandBrandFamilyFamilyModelModelTemplateGet",
        new ApiException(400, "Missing the required parameter 'brand' when calling v1ApBrandBrandFamilyFamilyModelModelTemplateGet"));
    }
    // verify the required parameter 'family' is set
    if (family == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'family' when calling v1ApBrandBrandFamilyFamilyModelModelTemplateGet",
        new ApiException(400, "Missing the required parameter 'family' when calling v1ApBrandBrandFamilyFamilyModelModelTemplateGet"));
    }
    // verify the required parameter 'model' is set
    if (model == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'model' when calling v1ApBrandBrandFamilyFamilyModelModelTemplateGet",
        new ApiException(400, "Missing the required parameter 'model' when calling v1ApBrandBrandFamilyFamilyModelModelTemplateGet"));
    }

    // create path and map variables
    String path = "/v1/ap/brand/{brand}/family/{family}/model/{model}/template".replaceAll("\\{format\\}","json").replaceAll("\\{" + "brand" + "\\}", apiInvoker.escapeString(brand.toString())).replaceAll("\\{" + "family" + "\\}", apiInvoker.escapeString(family.toString())).replaceAll("\\{" + "model" + "\\}", apiInvoker.escapeString(model.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "firmware", firmware));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_key", startKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "status", status));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "template_name", templateName));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ProvisioningDocsDocsTemplatesOutput) ApiInvoker.deserialize(localVarResponse,  "", ProvisioningDocsDocsTemplatesOutput.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Template Details
  * Retrieve details about a template for a model by the randomly generated ID.
   * @param brand brand
   * @param family family
   * @param model model
   * @param template template
   * @return ProvisioningDocsDocsTemplateOutputSingle
  */
  public ProvisioningDocsDocsTemplateOutputSingle v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGet (String brand, String family, String model, String template) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'brand' is set
    if (brand == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'brand' when calling v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGet",
        new ApiException(400, "Missing the required parameter 'brand' when calling v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGet"));
    }
    // verify the required parameter 'family' is set
    if (family == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'family' when calling v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGet",
        new ApiException(400, "Missing the required parameter 'family' when calling v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGet"));
    }
    // verify the required parameter 'model' is set
    if (model == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'model' when calling v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGet",
        new ApiException(400, "Missing the required parameter 'model' when calling v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGet"));
    }
    // verify the required parameter 'template' is set
    if (template == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'template' when calling v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGet",
        new ApiException(400, "Missing the required parameter 'template' when calling v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGet"));
    }

    // create path and map variables
    String path = "/v1/ap/brand/{brand}/family/{family}/model/{model}/template/{template}".replaceAll("\\{" + "brand" + "\\}", apiInvoker.escapeString(brand.toString())).replaceAll("\\{" + "family" + "\\}", apiInvoker.escapeString(family.toString())).replaceAll("\\{" + "model" + "\\}", apiInvoker.escapeString(model.toString())).replaceAll("\\{" + "template" + "\\}", apiInvoker.escapeString(template.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ProvisioningDocsDocsTemplateOutputSingle) ApiInvoker.deserialize(localVarResponse, "", ProvisioningDocsDocsTemplateOutputSingle.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Template Details
   * Retrieve details about a template for a model by the randomly generated ID.
   * @param brand brand   * @param family family   * @param model model   * @param template template
  */
  public void v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGet (String brand, String family, String model, String template, final Response.Listener<ProvisioningDocsDocsTemplateOutputSingle> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'brand' is set
    if (brand == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'brand' when calling v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGet",
        new ApiException(400, "Missing the required parameter 'brand' when calling v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGet"));
    }
    // verify the required parameter 'family' is set
    if (family == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'family' when calling v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGet",
        new ApiException(400, "Missing the required parameter 'family' when calling v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGet"));
    }
    // verify the required parameter 'model' is set
    if (model == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'model' when calling v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGet",
        new ApiException(400, "Missing the required parameter 'model' when calling v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGet"));
    }
    // verify the required parameter 'template' is set
    if (template == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'template' when calling v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGet",
        new ApiException(400, "Missing the required parameter 'template' when calling v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGet"));
    }

    // create path and map variables
    String path = "/v1/ap/brand/{brand}/family/{family}/model/{model}/template/{template}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "brand" + "\\}", apiInvoker.escapeString(brand.toString())).replaceAll("\\{" + "family" + "\\}", apiInvoker.escapeString(family.toString())).replaceAll("\\{" + "model" + "\\}", apiInvoker.escapeString(model.toString())).replaceAll("\\{" + "template" + "\\}", apiInvoker.escapeString(template.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ProvisioningDocsDocsTemplateOutputSingle) ApiInvoker.deserialize(localVarResponse,  "", ProvisioningDocsDocsTemplateOutputSingle.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Family List
  * Retrieve a list of all families for a brand (e.g., Yealink and Polycom).
   * @param brand brand
   * @param familyName 
   * @param pageSize 
   * @param startKey 
   * @param status 
   * @return ProvisioningDocsDocsFamilyOutput
  */
  public ProvisioningDocsDocsFamilyOutput v1ApBrandBrandFamilyGet (String brand, String familyName, Integer pageSize, String startKey, String status) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'brand' is set
    if (brand == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'brand' when calling v1ApBrandBrandFamilyGet",
        new ApiException(400, "Missing the required parameter 'brand' when calling v1ApBrandBrandFamilyGet"));
    }

    // create path and map variables
    String path = "/v1/ap/brand/{brand}/family".replaceAll("\\{" + "brand" + "\\}", apiInvoker.escapeString(brand.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "family_name", familyName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_key", startKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "status", status));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ProvisioningDocsDocsFamilyOutput) ApiInvoker.deserialize(localVarResponse, "", ProvisioningDocsDocsFamilyOutput.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Family List
   * Retrieve a list of all families for a brand (e.g., Yealink and Polycom).
   * @param brand brand   * @param familyName    * @param pageSize    * @param startKey    * @param status 
  */
  public void v1ApBrandBrandFamilyGet (String brand, String familyName, Integer pageSize, String startKey, String status, final Response.Listener<ProvisioningDocsDocsFamilyOutput> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'brand' is set
    if (brand == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'brand' when calling v1ApBrandBrandFamilyGet",
        new ApiException(400, "Missing the required parameter 'brand' when calling v1ApBrandBrandFamilyGet"));
    }

    // create path and map variables
    String path = "/v1/ap/brand/{brand}/family".replaceAll("\\{format\\}","json").replaceAll("\\{" + "brand" + "\\}", apiInvoker.escapeString(brand.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "family_name", familyName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_key", startKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "status", status));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ProvisioningDocsDocsFamilyOutput) ApiInvoker.deserialize(localVarResponse,  "", ProvisioningDocsDocsFamilyOutput.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Brand Details
  * Retrieve a brand&#39;s details by the randomly generated ID.
   * @param brand brand id to retrieve a brand
   * @return ProvisioningDocsDocsBrandOutputSingle
  */
  public ProvisioningDocsDocsBrandOutputSingle v1ApBrandBrandGet (String brand) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'brand' is set
    if (brand == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'brand' when calling v1ApBrandBrandGet",
        new ApiException(400, "Missing the required parameter 'brand' when calling v1ApBrandBrandGet"));
    }

    // create path and map variables
    String path = "/v1/ap/brand/{brand}".replaceAll("\\{" + "brand" + "\\}", apiInvoker.escapeString(brand.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ProvisioningDocsDocsBrandOutputSingle) ApiInvoker.deserialize(localVarResponse, "", ProvisioningDocsDocsBrandOutputSingle.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Brand Details
   * Retrieve a brand&#39;s details by the randomly generated ID.
   * @param brand brand id to retrieve a brand
  */
  public void v1ApBrandBrandGet (String brand, final Response.Listener<ProvisioningDocsDocsBrandOutputSingle> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'brand' is set
    if (brand == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'brand' when calling v1ApBrandBrandGet",
        new ApiException(400, "Missing the required parameter 'brand' when calling v1ApBrandBrandGet"));
    }

    // create path and map variables
    String path = "/v1/ap/brand/{brand}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "brand" + "\\}", apiInvoker.escapeString(brand.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ProvisioningDocsDocsBrandOutputSingle) ApiInvoker.deserialize(localVarResponse,  "", ProvisioningDocsDocsBrandOutputSingle.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Brand List
  * Retrieve a list of all brands (e.g., Yealink and Polycom) by client.
   * @param brandName 
   * @param pageSize 
   * @param startKey 
   * @param status 
   * @return ProvisioningDocsDocsBrandsOutput
  */
  public ProvisioningDocsDocsBrandsOutput v1ApBrandGet (String brandName, Integer pageSize, String startKey, String status) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/v1/ap/brand";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "brand_name", brandName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_key", startKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "status", status));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ProvisioningDocsDocsBrandsOutput) ApiInvoker.deserialize(localVarResponse, "", ProvisioningDocsDocsBrandsOutput.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Brand List
   * Retrieve a list of all brands (e.g., Yealink and Polycom) by client.
   * @param brandName    * @param pageSize    * @param startKey    * @param status 
  */
  public void v1ApBrandGet (String brandName, Integer pageSize, String startKey, String status, final Response.Listener<ProvisioningDocsDocsBrandsOutput> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/v1/ap/brand".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "brand_name", brandName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_key", startKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "status", status));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ProvisioningDocsDocsBrandsOutput) ApiInvoker.deserialize(localVarResponse,  "", ProvisioningDocsDocsBrandsOutput.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Generate Config File
  * Generate a configuration file that includes a list of parameters passed to the specified template_id in the request payload, with populated values returned in the response.
   * @param params body params to generate config file
   * @return ProvisioningDocsDocsConfigFileOutput
  */
  public ProvisioningDocsDocsConfigFileOutput v1ApConfigfileGeneratePost (ModelsGenerateConfigFileRequest params) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = params;
    // verify the required parameter 'params' is set
    if (params == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'params' when calling v1ApConfigfileGeneratePost",
        new ApiException(400, "Missing the required parameter 'params' when calling v1ApConfigfileGeneratePost"));
    }

    // create path and map variables
    String path = "/v1/ap/configfile/generate";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ProvisioningDocsDocsConfigFileOutput) ApiInvoker.deserialize(localVarResponse, "", ProvisioningDocsDocsConfigFileOutput.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Generate Config File
   * Generate a configuration file that includes a list of parameters passed to the specified template_id in the request payload, with populated values returned in the response.
   * @param params body params to generate config file
  */
  public void v1ApConfigfileGeneratePost (ModelsGenerateConfigFileRequest params, final Response.Listener<ProvisioningDocsDocsConfigFileOutput> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = params;

    // verify the required parameter 'params' is set
    if (params == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'params' when calling v1ApConfigfileGeneratePost",
        new ApiException(400, "Missing the required parameter 'params' when calling v1ApConfigfileGeneratePost"));
    }

    // create path and map variables
    String path = "/v1/ap/configfile/generate".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ProvisioningDocsDocsConfigFileOutput) ApiInvoker.deserialize(localVarResponse,  "", ProvisioningDocsDocsConfigFileOutput.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
