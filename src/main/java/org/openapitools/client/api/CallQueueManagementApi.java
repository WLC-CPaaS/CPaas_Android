/**
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.CPAASError;
import org.openapitools.client.model.ServiceAPIResponse;
import org.openapitools.client.model.ServiceDocsCallQueueGetAll;
import org.openapitools.client.model.ServiceDocsCallQueueGetRoles;
import org.openapitools.client.model.ServiceDocsCallQueueGetSingle;
import org.openapitools.client.model.ServiceDocsCallQueueGetSingleStatus;
import org.openapitools.client.model.ServiceVOIPCallQueueAddEditData;
import org.openapitools.client.model.ServiceVOIPCallQueueRoleAssignData;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class CallQueueManagementApi {
  String basePath = "http://api.beta.cpaaslabs.net";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Get Call Queues
  * Retrieve call queue details for an account.
   * @param accountID Account ID, 32 alpha numeric
   * @return ServiceDocsCallQueueGetAll
  */
  public ServiceDocsCallQueueGetAll v1AccountAccountIDCallqueueGet (String accountID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDCallqueueGet",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDCallqueueGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/callqueue".replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsCallQueueGetAll) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsCallQueueGetAll.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Call Queues
   * Retrieve call queue details for an account.
   * @param accountID Account ID, 32 alpha numeric
  */
  public void v1AccountAccountIDCallqueueGet (String accountID, final Response.Listener<ServiceDocsCallQueueGetAll> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDCallqueueGet",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDCallqueueGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/callqueue".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsCallQueueGetAll) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsCallQueueGetAll.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create Call Queue
  * Set up a call queue in an account for specific inbound calls.
   * @param accountID Account ID, 32 alpha numeric
   * @param reqBody payload fields
   * @return ServiceDocsCallQueueGetSingle
  */
  public ServiceDocsCallQueueGetSingle v1AccountAccountIDCallqueuePost (String accountID, ServiceVOIPCallQueueAddEditData reqBody) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = reqBody;
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDCallqueuePost",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDCallqueuePost"));
    }
    // verify the required parameter 'reqBody' is set
    if (reqBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'reqBody' when calling v1AccountAccountIDCallqueuePost",
        new ApiException(400, "Missing the required parameter 'reqBody' when calling v1AccountAccountIDCallqueuePost"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/callqueue".replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsCallQueueGetSingle) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsCallQueueGetSingle.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create Call Queue
   * Set up a call queue in an account for specific inbound calls.
   * @param accountID Account ID, 32 alpha numeric   * @param reqBody payload fields
  */
  public void v1AccountAccountIDCallqueuePost (String accountID, ServiceVOIPCallQueueAddEditData reqBody, final Response.Listener<ServiceDocsCallQueueGetSingle> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = reqBody;

    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDCallqueuePost",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDCallqueuePost"));
    }
    // verify the required parameter 'reqBody' is set
    if (reqBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'reqBody' when calling v1AccountAccountIDCallqueuePost",
        new ApiException(400, "Missing the required parameter 'reqBody' when calling v1AccountAccountIDCallqueuePost"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/callqueue".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsCallQueueGetSingle) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsCallQueueGetSingle.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete Call Queue
  * Remove the call queue from an account.
   * @param accountID Account ID, 32 alpha numeric
   * @param queueID Queue ID, 32 alpha numeric
   * @return ServiceDocsCallQueueGetSingle
  */
  public ServiceDocsCallQueueGetSingle v1AccountAccountIDCallqueueQueueIDDelete (String accountID, String queueID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDCallqueueQueueIDDelete",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDCallqueueQueueIDDelete"));
    }
    // verify the required parameter 'queueID' is set
    if (queueID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'queueID' when calling v1AccountAccountIDCallqueueQueueIDDelete",
        new ApiException(400, "Missing the required parameter 'queueID' when calling v1AccountAccountIDCallqueueQueueIDDelete"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/callqueue/{queueID}".replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "queueID" + "\\}", apiInvoker.escapeString(queueID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsCallQueueGetSingle) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsCallQueueGetSingle.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete Call Queue
   * Remove the call queue from an account.
   * @param accountID Account ID, 32 alpha numeric   * @param queueID Queue ID, 32 alpha numeric
  */
  public void v1AccountAccountIDCallqueueQueueIDDelete (String accountID, String queueID, final Response.Listener<ServiceDocsCallQueueGetSingle> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDCallqueueQueueIDDelete",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDCallqueueQueueIDDelete"));
    }
    // verify the required parameter 'queueID' is set
    if (queueID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'queueID' when calling v1AccountAccountIDCallqueueQueueIDDelete",
        new ApiException(400, "Missing the required parameter 'queueID' when calling v1AccountAccountIDCallqueueQueueIDDelete"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/callqueue/{queueID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "queueID" + "\\}", apiInvoker.escapeString(queueID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsCallQueueGetSingle) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsCallQueueGetSingle.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Call Queue Details
  * Capture metadata about a specific queue, such as queue_type and agent_wrapup_time.
   * @param accountID Account ID, 32 alpha numeric
   * @param queueID Queue ID, 32 alpha numeric
   * @return ServiceDocsCallQueueGetSingle
  */
  public ServiceDocsCallQueueGetSingle v1AccountAccountIDCallqueueQueueIDGet (String accountID, String queueID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDCallqueueQueueIDGet",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDCallqueueQueueIDGet"));
    }
    // verify the required parameter 'queueID' is set
    if (queueID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'queueID' when calling v1AccountAccountIDCallqueueQueueIDGet",
        new ApiException(400, "Missing the required parameter 'queueID' when calling v1AccountAccountIDCallqueueQueueIDGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/callqueue/{queueID}".replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "queueID" + "\\}", apiInvoker.escapeString(queueID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsCallQueueGetSingle) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsCallQueueGetSingle.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Call Queue Details
   * Capture metadata about a specific queue, such as queue_type and agent_wrapup_time.
   * @param accountID Account ID, 32 alpha numeric   * @param queueID Queue ID, 32 alpha numeric
  */
  public void v1AccountAccountIDCallqueueQueueIDGet (String accountID, String queueID, final Response.Listener<ServiceDocsCallQueueGetSingle> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDCallqueueQueueIDGet",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDCallqueueQueueIDGet"));
    }
    // verify the required parameter 'queueID' is set
    if (queueID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'queueID' when calling v1AccountAccountIDCallqueueQueueIDGet",
        new ApiException(400, "Missing the required parameter 'queueID' when calling v1AccountAccountIDCallqueueQueueIDGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/callqueue/{queueID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "queueID" + "\\}", apiInvoker.escapeString(queueID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsCallQueueGetSingle) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsCallQueueGetSingle.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update Call Queue
  * Update the metadata mentioned above.
   * @param accountID Account ID, 32 alpha numeric
   * @param queueID Queue ID, 32 alpha numeric
   * @param reqBody payload fields
   * @return ServiceDocsCallQueueGetSingle
  */
  public ServiceDocsCallQueueGetSingle v1AccountAccountIDCallqueueQueueIDPut (String accountID, String queueID, ServiceVOIPCallQueueAddEditData reqBody) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = reqBody;
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDCallqueueQueueIDPut",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDCallqueueQueueIDPut"));
    }
    // verify the required parameter 'queueID' is set
    if (queueID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'queueID' when calling v1AccountAccountIDCallqueueQueueIDPut",
        new ApiException(400, "Missing the required parameter 'queueID' when calling v1AccountAccountIDCallqueueQueueIDPut"));
    }
    // verify the required parameter 'reqBody' is set
    if (reqBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'reqBody' when calling v1AccountAccountIDCallqueueQueueIDPut",
        new ApiException(400, "Missing the required parameter 'reqBody' when calling v1AccountAccountIDCallqueueQueueIDPut"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/callqueue/{queueID}".replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "queueID" + "\\}", apiInvoker.escapeString(queueID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsCallQueueGetSingle) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsCallQueueGetSingle.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update Call Queue
   * Update the metadata mentioned above.
   * @param accountID Account ID, 32 alpha numeric   * @param queueID Queue ID, 32 alpha numeric   * @param reqBody payload fields
  */
  public void v1AccountAccountIDCallqueueQueueIDPut (String accountID, String queueID, ServiceVOIPCallQueueAddEditData reqBody, final Response.Listener<ServiceDocsCallQueueGetSingle> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = reqBody;

    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDCallqueueQueueIDPut",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDCallqueueQueueIDPut"));
    }
    // verify the required parameter 'queueID' is set
    if (queueID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'queueID' when calling v1AccountAccountIDCallqueueQueueIDPut",
        new ApiException(400, "Missing the required parameter 'queueID' when calling v1AccountAccountIDCallqueueQueueIDPut"));
    }
    // verify the required parameter 'reqBody' is set
    if (reqBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'reqBody' when calling v1AccountAccountIDCallqueueQueueIDPut",
        new ApiException(400, "Missing the required parameter 'reqBody' when calling v1AccountAccountIDCallqueueQueueIDPut"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/callqueue/{queueID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "queueID" + "\\}", apiInvoker.escapeString(queueID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsCallQueueGetSingle) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsCallQueueGetSingle.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Call Queue Status
  * Access the status of a call queue in an account, such as the number of available agents (recipients), estimated wait time, and number of active sessions.
   * @param accountID Account ID, 32 alpha numeric
   * @param queueID Queue ID, 32 alpha numeric
   * @return ServiceDocsCallQueueGetSingleStatus
  */
  public ServiceDocsCallQueueGetSingleStatus v1AccountAccountIDCallqueueQueueIDStatusGet (String accountID, String queueID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDCallqueueQueueIDStatusGet",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDCallqueueQueueIDStatusGet"));
    }
    // verify the required parameter 'queueID' is set
    if (queueID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'queueID' when calling v1AccountAccountIDCallqueueQueueIDStatusGet",
        new ApiException(400, "Missing the required parameter 'queueID' when calling v1AccountAccountIDCallqueueQueueIDStatusGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/callqueue/{queueID}/status".replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "queueID" + "\\}", apiInvoker.escapeString(queueID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsCallQueueGetSingleStatus) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsCallQueueGetSingleStatus.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Call Queue Status
   * Access the status of a call queue in an account, such as the number of available agents (recipients), estimated wait time, and number of active sessions.
   * @param accountID Account ID, 32 alpha numeric   * @param queueID Queue ID, 32 alpha numeric
  */
  public void v1AccountAccountIDCallqueueQueueIDStatusGet (String accountID, String queueID, final Response.Listener<ServiceDocsCallQueueGetSingleStatus> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDCallqueueQueueIDStatusGet",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDCallqueueQueueIDStatusGet"));
    }
    // verify the required parameter 'queueID' is set
    if (queueID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'queueID' when calling v1AccountAccountIDCallqueueQueueIDStatusGet",
        new ApiException(400, "Missing the required parameter 'queueID' when calling v1AccountAccountIDCallqueueQueueIDStatusGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/callqueue/{queueID}/status".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "queueID" + "\\}", apiInvoker.escapeString(queueID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsCallQueueGetSingleStatus) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsCallQueueGetSingleStatus.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Queue Roles of Account
  * Obtain data about each queue role in an account.
   * @param accountID Account ID, 32 alpha numeric
   * @return ServiceDocsCallQueueGetRoles
  */
  public ServiceDocsCallQueueGetRoles v1AccountAccountIDQueuerolesGet (String accountID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDQueuerolesGet",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDQueuerolesGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/queueroles".replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsCallQueueGetRoles) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsCallQueueGetRoles.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Queue Roles of Account
   * Obtain data about each queue role in an account.
   * @param accountID Account ID, 32 alpha numeric
  */
  public void v1AccountAccountIDQueuerolesGet (String accountID, final Response.Listener<ServiceDocsCallQueueGetRoles> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDQueuerolesGet",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDQueuerolesGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/queueroles".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsCallQueueGetRoles) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsCallQueueGetRoles.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Assign Queue Role to Call Queue
  * Assign roles to members in a call queue.
   * @param accountID Account ID, 32 alpha numeric
   * @param queueID Queue ID, 32 alpha numeric
   * @param reqBody payload fields
   * @return ServiceAPIResponse
  */
  public ServiceAPIResponse v1AccountAccountIDQueuerolesQueueIDPost (String accountID, String queueID, ServiceVOIPCallQueueRoleAssignData reqBody) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = reqBody;
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDQueuerolesQueueIDPost",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDQueuerolesQueueIDPost"));
    }
    // verify the required parameter 'queueID' is set
    if (queueID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'queueID' when calling v1AccountAccountIDQueuerolesQueueIDPost",
        new ApiException(400, "Missing the required parameter 'queueID' when calling v1AccountAccountIDQueuerolesQueueIDPost"));
    }
    // verify the required parameter 'reqBody' is set
    if (reqBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'reqBody' when calling v1AccountAccountIDQueuerolesQueueIDPost",
        new ApiException(400, "Missing the required parameter 'reqBody' when calling v1AccountAccountIDQueuerolesQueueIDPost"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/queueroles/{queueID}".replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "queueID" + "\\}", apiInvoker.escapeString(queueID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceAPIResponse) ApiInvoker.deserialize(localVarResponse, "", ServiceAPIResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Assign Queue Role to Call Queue
   * Assign roles to members in a call queue.
   * @param accountID Account ID, 32 alpha numeric   * @param queueID Queue ID, 32 alpha numeric   * @param reqBody payload fields
  */
  public void v1AccountAccountIDQueuerolesQueueIDPost (String accountID, String queueID, ServiceVOIPCallQueueRoleAssignData reqBody, final Response.Listener<ServiceAPIResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = reqBody;

    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDQueuerolesQueueIDPost",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDQueuerolesQueueIDPost"));
    }
    // verify the required parameter 'queueID' is set
    if (queueID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'queueID' when calling v1AccountAccountIDQueuerolesQueueIDPost",
        new ApiException(400, "Missing the required parameter 'queueID' when calling v1AccountAccountIDQueuerolesQueueIDPost"));
    }
    // verify the required parameter 'reqBody' is set
    if (reqBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'reqBody' when calling v1AccountAccountIDQueuerolesQueueIDPost",
        new ApiException(400, "Missing the required parameter 'reqBody' when calling v1AccountAccountIDQueuerolesQueueIDPost"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/queueroles/{queueID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "queueID" + "\\}", apiInvoker.escapeString(queueID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceAPIResponse) ApiInvoker.deserialize(localVarResponse,  "", ServiceAPIResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
