/**
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.CPAASError;
import org.openapitools.client.model.ServiceDocGroupGetAll;
import org.openapitools.client.model.ServiceDocGroupGetSingle;
import org.openapitools.client.model.ServiceVOIPGroupAddEdit2;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class GroupApi {
  String basePath = "http://API_HOSTNAME";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Get Group List
  * Get a list of groups associated with an account.
   * @param accountID Account ID, 32 alpha numeric
   * @param startKey start_key for pagination that was returned as next_start_key from your previous call
   * @param pageSize number of records to return, range 1 to 50
   * @return ServiceDocGroupGetAll
  */
  public ServiceDocGroupGetAll v1AccountAccountIDGroupGet (String accountID, String startKey, Integer pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDGroupGet",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDGroupGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/group".replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_key", startKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocGroupGetAll) ApiInvoker.deserialize(localVarResponse, "", ServiceDocGroupGetAll.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Group List
   * Get a list of groups associated with an account.
   * @param accountID Account ID, 32 alpha numeric   * @param startKey start_key for pagination that was returned as next_start_key from your previous call   * @param pageSize number of records to return, range 1 to 50
  */
  public void v1AccountAccountIDGroupGet (String accountID, String startKey, Integer pageSize, final Response.Listener<ServiceDocGroupGetAll> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDGroupGet",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDGroupGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/group".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_key", startKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocGroupGetAll) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocGroupGetAll.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete Group
  * Delete a call group in an account.
   * @param accountID Account ID, 32 alpha numeric
   * @param groupID group ID, 32 alpha numeric
   * @return ServiceDocGroupGetSingle
  */
  public ServiceDocGroupGetSingle v1AccountAccountIDGroupGroupIDDelete (String accountID, String groupID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDGroupGroupIDDelete",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDGroupGroupIDDelete"));
    }
    // verify the required parameter 'groupID' is set
    if (groupID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupID' when calling v1AccountAccountIDGroupGroupIDDelete",
        new ApiException(400, "Missing the required parameter 'groupID' when calling v1AccountAccountIDGroupGroupIDDelete"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/group/{groupID}".replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "groupID" + "\\}", apiInvoker.escapeString(groupID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocGroupGetSingle) ApiInvoker.deserialize(localVarResponse, "", ServiceDocGroupGetSingle.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete Group
   * Delete a call group in an account.
   * @param accountID Account ID, 32 alpha numeric   * @param groupID group ID, 32 alpha numeric
  */
  public void v1AccountAccountIDGroupGroupIDDelete (String accountID, String groupID, final Response.Listener<ServiceDocGroupGetSingle> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDGroupGroupIDDelete",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDGroupGroupIDDelete"));
    }
    // verify the required parameter 'groupID' is set
    if (groupID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupID' when calling v1AccountAccountIDGroupGroupIDDelete",
        new ApiException(400, "Missing the required parameter 'groupID' when calling v1AccountAccountIDGroupGroupIDDelete"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/group/{groupID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "groupID" + "\\}", apiInvoker.escapeString(groupID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocGroupGetSingle) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocGroupGetSingle.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Group Details
  * Access details about a single group within an account.
   * @param accountID Account ID, 32 alpha numeric
   * @param groupID Group ID, 32 alpha numeric
   * @return ServiceDocGroupGetSingle
  */
  public ServiceDocGroupGetSingle v1AccountAccountIDGroupGroupIDGet (String accountID, String groupID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDGroupGroupIDGet",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDGroupGroupIDGet"));
    }
    // verify the required parameter 'groupID' is set
    if (groupID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupID' when calling v1AccountAccountIDGroupGroupIDGet",
        new ApiException(400, "Missing the required parameter 'groupID' when calling v1AccountAccountIDGroupGroupIDGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/group/{groupID}".replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "groupID" + "\\}", apiInvoker.escapeString(groupID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocGroupGetSingle) ApiInvoker.deserialize(localVarResponse, "", ServiceDocGroupGetSingle.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Group Details
   * Access details about a single group within an account.
   * @param accountID Account ID, 32 alpha numeric   * @param groupID Group ID, 32 alpha numeric
  */
  public void v1AccountAccountIDGroupGroupIDGet (String accountID, String groupID, final Response.Listener<ServiceDocGroupGetSingle> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDGroupGroupIDGet",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDGroupGroupIDGet"));
    }
    // verify the required parameter 'groupID' is set
    if (groupID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupID' when calling v1AccountAccountIDGroupGroupIDGet",
        new ApiException(400, "Missing the required parameter 'groupID' when calling v1AccountAccountIDGroupGroupIDGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/group/{groupID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "groupID" + "\\}", apiInvoker.escapeString(groupID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocGroupGetSingle) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocGroupGetSingle.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update Group
  * Modify the name, settings and other information for a group within an account.
   * @param accountID Account ID, 32 alpha numeric
   * @param groupID Group ID, 32 alpha numeric
   * @param reqBody payload fields
   * @return ServiceDocGroupGetSingle
  */
  public ServiceDocGroupGetSingle v1AccountAccountIDGroupGroupIDPut (String accountID, String groupID, ServiceVOIPGroupAddEdit2 reqBody) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = reqBody;
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDGroupGroupIDPut",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDGroupGroupIDPut"));
    }
    // verify the required parameter 'groupID' is set
    if (groupID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupID' when calling v1AccountAccountIDGroupGroupIDPut",
        new ApiException(400, "Missing the required parameter 'groupID' when calling v1AccountAccountIDGroupGroupIDPut"));
    }
    // verify the required parameter 'reqBody' is set
    if (reqBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'reqBody' when calling v1AccountAccountIDGroupGroupIDPut",
        new ApiException(400, "Missing the required parameter 'reqBody' when calling v1AccountAccountIDGroupGroupIDPut"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/group/{groupID}".replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "groupID" + "\\}", apiInvoker.escapeString(groupID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocGroupGetSingle) ApiInvoker.deserialize(localVarResponse, "", ServiceDocGroupGetSingle.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update Group
   * Modify the name, settings and other information for a group within an account.
   * @param accountID Account ID, 32 alpha numeric   * @param groupID Group ID, 32 alpha numeric   * @param reqBody payload fields
  */
  public void v1AccountAccountIDGroupGroupIDPut (String accountID, String groupID, ServiceVOIPGroupAddEdit2 reqBody, final Response.Listener<ServiceDocGroupGetSingle> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = reqBody;

    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDGroupGroupIDPut",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDGroupGroupIDPut"));
    }
    // verify the required parameter 'groupID' is set
    if (groupID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupID' when calling v1AccountAccountIDGroupGroupIDPut",
        new ApiException(400, "Missing the required parameter 'groupID' when calling v1AccountAccountIDGroupGroupIDPut"));
    }
    // verify the required parameter 'reqBody' is set
    if (reqBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'reqBody' when calling v1AccountAccountIDGroupGroupIDPut",
        new ApiException(400, "Missing the required parameter 'reqBody' when calling v1AccountAccountIDGroupGroupIDPut"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/group/{groupID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "groupID" + "\\}", apiInvoker.escapeString(groupID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocGroupGetSingle) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocGroupGetSingle.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create Group
  * Provide an additional resource by adding a group list to an account.
   * @param accountID Account ID
   * @param group group fields
   * @return ServiceDocGroupGetSingle
  */
  public ServiceDocGroupGetSingle v1AccountAccountIDGroupPost (String accountID, ServiceVOIPGroupAddEdit2 group) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = group;
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDGroupPost",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDGroupPost"));
    }
    // verify the required parameter 'group' is set
    if (group == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'group' when calling v1AccountAccountIDGroupPost",
        new ApiException(400, "Missing the required parameter 'group' when calling v1AccountAccountIDGroupPost"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/group".replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocGroupGetSingle) ApiInvoker.deserialize(localVarResponse, "", ServiceDocGroupGetSingle.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create Group
   * Provide an additional resource by adding a group list to an account.
   * @param accountID Account ID   * @param group group fields
  */
  public void v1AccountAccountIDGroupPost (String accountID, ServiceVOIPGroupAddEdit2 group, final Response.Listener<ServiceDocGroupGetSingle> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = group;

    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDGroupPost",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDGroupPost"));
    }
    // verify the required parameter 'group' is set
    if (group == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'group' when calling v1AccountAccountIDGroupPost",
        new ApiException(400, "Missing the required parameter 'group' when calling v1AccountAccountIDGroupPost"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/group".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocGroupGetSingle) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocGroupGetSingle.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
