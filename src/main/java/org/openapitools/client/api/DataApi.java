/**
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.CPAASError;
import org.openapitools.client.model.ServiceDocsCallDailySummary;
import org.openapitools.client.model.ServiceDocsCallDetail;
import org.openapitools.client.model.ServiceDocsCallMonthlySummary;
import org.openapitools.client.model.ServiceDocsCdrGetAll;
import org.openapitools.client.model.ServiceDocsCdrGetSingle;
import org.openapitools.client.model.ServiceDocsEndpointList;
import org.openapitools.client.model.ServiceDocsEventDailySummary;
import org.openapitools.client.model.ServiceDocsEventDetail;
import org.openapitools.client.model.ServiceDocsEventMonthlySummary;
import org.openapitools.client.model.ServiceDocsFeatureDailySummary;
import org.openapitools.client.model.ServiceDocsFeatureMonthlySummary;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class DataApi {
  String basePath = "http://api.beta.cpaaslabs.net";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Get CDR Details
  * Retrieve the details of a single CDR record from an account.
   * @param accountID Account ID, 32 alpha numeric
   * @param cdrID CDR ID, string
   * @return ServiceDocsCdrGetSingle
  */
  public ServiceDocsCdrGetSingle v1AccountAccountIDCdrCdrIDGet (String accountID, String cdrID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDCdrCdrIDGet",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDCdrCdrIDGet"));
    }
    // verify the required parameter 'cdrID' is set
    if (cdrID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'cdrID' when calling v1AccountAccountIDCdrCdrIDGet",
        new ApiException(400, "Missing the required parameter 'cdrID' when calling v1AccountAccountIDCdrCdrIDGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/cdr/{cdrID}".replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "cdrID" + "\\}", apiInvoker.escapeString(cdrID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsCdrGetSingle) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsCdrGetSingle.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get CDR Details
   * Retrieve the details of a single CDR record from an account.
   * @param accountID Account ID, 32 alpha numeric   * @param cdrID CDR ID, string
  */
  public void v1AccountAccountIDCdrCdrIDGet (String accountID, String cdrID, final Response.Listener<ServiceDocsCdrGetSingle> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDCdrCdrIDGet",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDCdrCdrIDGet"));
    }
    // verify the required parameter 'cdrID' is set
    if (cdrID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'cdrID' when calling v1AccountAccountIDCdrCdrIDGet",
        new ApiException(400, "Missing the required parameter 'cdrID' when calling v1AccountAccountIDCdrCdrIDGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/cdr/{cdrID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "cdrID" + "\\}", apiInvoker.escapeString(cdrID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsCdrGetSingle) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsCdrGetSingle.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get CDR List
  * Retrieve a list of CDRs in a specific account.
   * @param accountID Account ID, 32 alpha numeric
   * @param pageSize Page size (Maximum number of results to display per page)
   * @param startKey Start key (Starting offset for displaying results)
   * @param createdFrom For displaying records which are created on or after this timestamp (Supported timestamp formats: iso 8601, unix time in seconds or milliseconds or microseconds or nanoseconds)
   * @param createdTo For displaying records which are created on or before this timestamp (Supported timestamp formats: iso 8601, unix time in seconds or milliseconds or microseconds or nanoseconds)
   * @return ServiceDocsCdrGetAll
  */
  public ServiceDocsCdrGetAll v1AccountAccountIDCdrGet (String accountID, String pageSize, String startKey, String createdFrom, String createdTo) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDCdrGet",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDCdrGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/cdr".replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_key", startKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "created_from", createdFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "created_to", createdTo));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsCdrGetAll) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsCdrGetAll.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get CDR List
   * Retrieve a list of CDRs in a specific account.
   * @param accountID Account ID, 32 alpha numeric   * @param pageSize Page size (Maximum number of results to display per page)   * @param startKey Start key (Starting offset for displaying results)   * @param createdFrom For displaying records which are created on or after this timestamp (Supported timestamp formats: iso 8601, unix time in seconds or milliseconds or microseconds or nanoseconds)   * @param createdTo For displaying records which are created on or before this timestamp (Supported timestamp formats: iso 8601, unix time in seconds or milliseconds or microseconds or nanoseconds)
  */
  public void v1AccountAccountIDCdrGet (String accountID, String pageSize, String startKey, String createdFrom, String createdTo, final Response.Listener<ServiceDocsCdrGetAll> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDCdrGet",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDCdrGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/cdr".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_key", startKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "created_from", createdFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "created_to", createdTo));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsCdrGetAll) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsCdrGetAll.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Call Daily Summary List
  * Retrieve a daily summary of calls, including the account ID that made or received a call, the call type, the month and year, the duration, and other relevant information.
   * @param accountId 
   * @param callType 
   * @param endDate 
   * @param pageSize 
   * @param startDate 
   * @param startKey 
   * @return ServiceDocsCallDailySummary
  */
  public ServiceDocsCallDailySummary v1DataCallDailySummaryGet (String accountId, String callType, String endDate, Integer pageSize, String startDate, String startKey) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/v1/data/call_daily_summary";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "account_id", accountId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "call_type", callType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "end_date", endDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_date", startDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_key", startKey));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsCallDailySummary) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsCallDailySummary.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Call Daily Summary List
   * Retrieve a daily summary of calls, including the account ID that made or received a call, the call type, the month and year, the duration, and other relevant information.
   * @param accountId    * @param callType    * @param endDate    * @param pageSize    * @param startDate    * @param startKey 
  */
  public void v1DataCallDailySummaryGet (String accountId, String callType, String endDate, Integer pageSize, String startDate, String startKey, final Response.Listener<ServiceDocsCallDailySummary> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/v1/data/call_daily_summary".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "account_id", accountId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "call_type", callType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "end_date", endDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_date", startDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_key", startKey));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsCallDailySummary) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsCallDailySummary.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Call Detail List
  * Retrieve specific details about a call (e.g., caller, recipient, date, time, duration, etc.).
   * @param account 
   * @param callType 
   * @param calleeName 
   * @param calleeNumber 
   * @param callerName 
   * @param callerNumber 
   * @param endDate 
   * @param pageSize 
   * @param startDate 
   * @param startKey 
   * @return ServiceDocsCallDetail
  */
  public ServiceDocsCallDetail v1DataCallDetailGet (String account, String callType, String calleeName, String calleeNumber, String callerName, String callerNumber, String endDate, Integer pageSize, String startDate, String startKey) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/v1/data/call_detail";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "account", account));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "call_type", callType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "callee_name", calleeName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "callee_number", calleeNumber));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "caller_name", callerName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "caller_number", callerNumber));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "end_date", endDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_date", startDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_key", startKey));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsCallDetail) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsCallDetail.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Call Detail List
   * Retrieve specific details about a call (e.g., caller, recipient, date, time, duration, etc.).
   * @param account    * @param callType    * @param calleeName    * @param calleeNumber    * @param callerName    * @param callerNumber    * @param endDate    * @param pageSize    * @param startDate    * @param startKey 
  */
  public void v1DataCallDetailGet (String account, String callType, String calleeName, String calleeNumber, String callerName, String callerNumber, String endDate, Integer pageSize, String startDate, String startKey, final Response.Listener<ServiceDocsCallDetail> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/v1/data/call_detail".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "account", account));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "call_type", callType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "callee_name", calleeName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "callee_number", calleeNumber));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "caller_name", callerName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "caller_number", callerNumber));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "end_date", endDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_date", startDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_key", startKey));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsCallDetail) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsCallDetail.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Call Detail List
  * Retrieve a monthly summary of calls, including which accounts made or received calls, the call type, and other relevant information.
   * @param account 
   * @param callType 
   * @param endMonth 
   * @param endYear 
   * @param pageSize 
   * @param startKey 
   * @param startMonth 
   * @param startYear 
   * @return ServiceDocsCallMonthlySummary
  */
  public ServiceDocsCallMonthlySummary v1DataCallMonthlySummaryGet (String account, String callType, Integer endMonth, Integer endYear, Integer pageSize, String startKey, Integer startMonth, Integer startYear) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/v1/data/call_monthly_summary";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "account", account));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "call_type", callType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "end_month", endMonth));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "end_year", endYear));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_key", startKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_month", startMonth));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_year", startYear));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsCallMonthlySummary) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsCallMonthlySummary.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Call Detail List
   * Retrieve a monthly summary of calls, including which accounts made or received calls, the call type, and other relevant information.
   * @param account    * @param callType    * @param endMonth    * @param endYear    * @param pageSize    * @param startKey    * @param startMonth    * @param startYear 
  */
  public void v1DataCallMonthlySummaryGet (String account, String callType, Integer endMonth, Integer endYear, Integer pageSize, String startKey, Integer startMonth, Integer startYear, final Response.Listener<ServiceDocsCallMonthlySummary> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/v1/data/call_monthly_summary".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "account", account));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "call_type", callType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "end_month", endMonth));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "end_year", endYear));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_key", startKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_month", startMonth));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_year", startYear));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsCallMonthlySummary) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsCallMonthlySummary.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Endpoint List
  * Access the endpoint list for each CPaaS API.
   * @param endpointName 
   * @param featureName 
   * @param pageSize 
   * @param startKey 
   * @param transactionType 
   * @param version 
   * @return ServiceDocsEndpointList
  */
  public ServiceDocsEndpointList v1DataEndpointListGet (String endpointName, String featureName, Integer pageSize, String startKey, String transactionType, String version) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/v1/data/endpoint_list";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "endpoint_name", endpointName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "feature_name", featureName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_key", startKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "transaction_type", transactionType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "version", version));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsEndpointList) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsEndpointList.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Endpoint List
   * Access the endpoint list for each CPaaS API.
   * @param endpointName    * @param featureName    * @param pageSize    * @param startKey    * @param transactionType    * @param version 
  */
  public void v1DataEndpointListGet (String endpointName, String featureName, Integer pageSize, String startKey, String transactionType, String version, final Response.Listener<ServiceDocsEndpointList> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/v1/data/endpoint_list".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "endpoint_name", endpointName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "feature_name", featureName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_key", startKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "transaction_type", transactionType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "version", version));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsEndpointList) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsEndpointList.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Event Daily Summary List
  * Obtain a daily summary of events in a CPaaS account (e.g., setting/resetting the presence status for a user or extension).
   * @param accountId 
   * @param component 
   * @param endDate 
   * @param pageSize 
   * @param startDate 
   * @param startKey 
   * @return ServiceDocsEventDailySummary
  */
  public ServiceDocsEventDailySummary v1DataEventDailySummaryGet (String accountId, String component, String endDate, Integer pageSize, String startDate, String startKey) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/v1/data/event_daily_summary";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "account_id", accountId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "component", component));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "end_date", endDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_date", startDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_key", startKey));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsEventDailySummary) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsEventDailySummary.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Event Daily Summary List
   * Obtain a daily summary of events in a CPaaS account (e.g., setting/resetting the presence status for a user or extension).
   * @param accountId    * @param component    * @param endDate    * @param pageSize    * @param startDate    * @param startKey 
  */
  public void v1DataEventDailySummaryGet (String accountId, String component, String endDate, Integer pageSize, String startDate, String startKey, final Response.Listener<ServiceDocsEventDailySummary> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/v1/data/event_daily_summary".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "account_id", accountId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "component", component));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "end_date", endDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_date", startDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_key", startKey));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsEventDailySummary) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsEventDailySummary.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Event Details
  * Obtain specific details about an event (e.g., an E911 notification, a deleted account, or a created user).
   * @param accountId 
   * @param component 
   * @param endDateTime 
   * @param eventName 
   * @param execStatus 
   * @param pageSize 
   * @param startDateTime 
   * @param startKey 
   * @param username 
   * @return ServiceDocsEventDetail
  */
  public ServiceDocsEventDetail v1DataEventDetailGet (String accountId, String component, String endDateTime, String eventName, String execStatus, Integer pageSize, String startDateTime, String startKey, String username) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/v1/data/event_detail";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "account_id", accountId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "component", component));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "end_date_time", endDateTime));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "event_name", eventName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exec_status", execStatus));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_date_time", startDateTime));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_key", startKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "username", username));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsEventDetail) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsEventDetail.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Event Details
   * Obtain specific details about an event (e.g., an E911 notification, a deleted account, or a created user).
   * @param accountId    * @param component    * @param endDateTime    * @param eventName    * @param execStatus    * @param pageSize    * @param startDateTime    * @param startKey    * @param username 
  */
  public void v1DataEventDetailGet (String accountId, String component, String endDateTime, String eventName, String execStatus, Integer pageSize, String startDateTime, String startKey, String username, final Response.Listener<ServiceDocsEventDetail> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/v1/data/event_detail".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "account_id", accountId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "component", component));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "end_date_time", endDateTime));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "event_name", eventName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exec_status", execStatus));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_date_time", startDateTime));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_key", startKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "username", username));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsEventDetail) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsEventDetail.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Event Monthly Summary List
  * Obtain a monthly summary of events in a CPaaS account (e.g., adding media files or assigning phone numbers).
   * @param accountId 
   * @param component 
   * @param endMonth 
   * @param endYear 
   * @param pageSize 
   * @param startKey 
   * @param startMonth 
   * @param startYear 
   * @return ServiceDocsEventMonthlySummary
  */
  public ServiceDocsEventMonthlySummary v1DataEventMonthlySummaryGet (String accountId, String component, Integer endMonth, Integer endYear, Integer pageSize, String startKey, Integer startMonth, Integer startYear) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/v1/data/event_monthly_summary";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "account_id", accountId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "component", component));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "end_month", endMonth));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "end_year", endYear));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_key", startKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_month", startMonth));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_year", startYear));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsEventMonthlySummary) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsEventMonthlySummary.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Event Monthly Summary List
   * Obtain a monthly summary of events in a CPaaS account (e.g., adding media files or assigning phone numbers).
   * @param accountId    * @param component    * @param endMonth    * @param endYear    * @param pageSize    * @param startKey    * @param startMonth    * @param startYear 
  */
  public void v1DataEventMonthlySummaryGet (String accountId, String component, Integer endMonth, Integer endYear, Integer pageSize, String startKey, Integer startMonth, Integer startYear, final Response.Listener<ServiceDocsEventMonthlySummary> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/v1/data/event_monthly_summary".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "account_id", accountId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "component", component));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "end_month", endMonth));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "end_year", endYear));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_key", startKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_month", startMonth));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_year", startYear));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsEventMonthlySummary) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsEventMonthlySummary.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Feature Daily Summary List
  * Retrieve a daily summary about a feature, including usage, which accounts execute the steps, and other relevant information.
   * @param endDate 
   * @param featureName 
   * @param pageSize 
   * @param startDate 
   * @param startKey 
   * @return ServiceDocsFeatureDailySummary
  */
  public ServiceDocsFeatureDailySummary v1DataFeatureDailySummaryGet (String endDate, String featureName, Integer pageSize, String startDate, String startKey) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/v1/data/feature_daily_summary";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "end_date", endDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "feature_name", featureName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_date", startDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_key", startKey));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsFeatureDailySummary) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsFeatureDailySummary.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Feature Daily Summary List
   * Retrieve a daily summary about a feature, including usage, which accounts execute the steps, and other relevant information.
   * @param endDate    * @param featureName    * @param pageSize    * @param startDate    * @param startKey 
  */
  public void v1DataFeatureDailySummaryGet (String endDate, String featureName, Integer pageSize, String startDate, String startKey, final Response.Listener<ServiceDocsFeatureDailySummary> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/v1/data/feature_daily_summary".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "end_date", endDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "feature_name", featureName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_date", startDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_key", startKey));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsFeatureDailySummary) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsFeatureDailySummary.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Feature Monthly Summary List
  * Retrieve a monthly summary about a feature’s usage, new users, updates, and other relevant information.
   * @param endMonth 
   * @param endYear 
   * @param featureName 
   * @param pageSize 
   * @param startKey 
   * @param startMonth 
   * @param startYear 
   * @return ServiceDocsFeatureMonthlySummary
  */
  public ServiceDocsFeatureMonthlySummary v1DataFeatureMonthlySummaryGet (Integer endMonth, Integer endYear, String featureName, Integer pageSize, String startKey, Integer startMonth, Integer startYear) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/v1/data/feature_monthly_summary";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "end_month", endMonth));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "end_year", endYear));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "feature_name", featureName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_key", startKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_month", startMonth));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_year", startYear));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsFeatureMonthlySummary) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsFeatureMonthlySummary.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Feature Monthly Summary List
   * Retrieve a monthly summary about a feature’s usage, new users, updates, and other relevant information.
   * @param endMonth    * @param endYear    * @param featureName    * @param pageSize    * @param startKey    * @param startMonth    * @param startYear 
  */
  public void v1DataFeatureMonthlySummaryGet (Integer endMonth, Integer endYear, String featureName, Integer pageSize, String startKey, Integer startMonth, Integer startYear, final Response.Listener<ServiceDocsFeatureMonthlySummary> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/v1/data/feature_monthly_summary".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "end_month", endMonth));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "end_year", endYear));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "feature_name", featureName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_key", startKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_month", startMonth));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_year", startYear));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsFeatureMonthlySummary) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsFeatureMonthlySummary.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
