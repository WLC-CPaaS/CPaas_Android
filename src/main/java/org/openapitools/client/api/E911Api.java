/**
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.CPAASError;
import org.openapitools.client.model.ServiceDocE911ActiveLocationOutput;
import org.openapitools.client.model.ServiceDocE911ActiveLocationURIApiOutput;
import org.openapitools.client.model.ServiceDocE911AddLocationOutput;
import org.openapitools.client.model.ServiceDocE911LocationsURIApiOutput;
import org.openapitools.client.model.ServiceDocE911RemoveLocationOutput;
import org.openapitools.client.model.ServiceDocE911RemoveURIApiOutput;
import org.openapitools.client.model.ServiceDocE911URIsApiOutput;
import org.openapitools.client.model.ServiceDocE911ValidateLocationOutput;
import org.openapitools.client.model.ServiceE911AddLocationInput;
import org.openapitools.client.model.ServiceE911ValidateLocationInput;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class E911Api {
  String basePath = "http://API_HOSTNAME";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Get E911 List
  * Obtain e911 URIs associated with the provided account ID.
   * @return ServiceDocE911URIsApiOutput
  */
  public ServiceDocE911URIsApiOutput v1E911Get () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/v1/e911";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocE911URIsApiOutput) ApiInvoker.deserialize(localVarResponse, "", ServiceDocE911URIsApiOutput.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get E911 List
   * Obtain e911 URIs associated with the provided account ID.

  */
  public void v1E911Get (final Response.Listener<ServiceDocE911URIsApiOutput> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/v1/e911".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocE911URIsApiOutput) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocE911URIsApiOutput.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Activate E911 Location
  * Edit the provision location.
   * @param locationID Location ID
   * @return ServiceDocE911ActiveLocationOutput
  */
  public ServiceDocE911ActiveLocationOutput v1E911LocationLocationIDActivatePut (String locationID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'locationID' is set
    if (locationID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'locationID' when calling v1E911LocationLocationIDActivatePut",
        new ApiException(400, "Missing the required parameter 'locationID' when calling v1E911LocationLocationIDActivatePut"));
    }

    // create path and map variables
    String path = "/v1/e911/location/{locationID}/activate".replaceAll("\\{" + "locationID" + "\\}", apiInvoker.escapeString(locationID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocE911ActiveLocationOutput) ApiInvoker.deserialize(localVarResponse, "", ServiceDocE911ActiveLocationOutput.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Activate E911 Location
   * Edit the provision location.
   * @param locationID Location ID
  */
  public void v1E911LocationLocationIDActivatePut (String locationID, final Response.Listener<ServiceDocE911ActiveLocationOutput> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'locationID' is set
    if (locationID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'locationID' when calling v1E911LocationLocationIDActivatePut",
        new ApiException(400, "Missing the required parameter 'locationID' when calling v1E911LocationLocationIDActivatePut"));
    }

    // create path and map variables
    String path = "/v1/e911/location/{locationID}/activate".replaceAll("\\{format\\}","json").replaceAll("\\{" + "locationID" + "\\}", apiInvoker.escapeString(locationID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocE911ActiveLocationOutput) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocE911ActiveLocationOutput.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete E911 Location
  * Remove the location.
   * @param locationID Location ID
   * @return ServiceDocE911RemoveLocationOutput
  */
  public ServiceDocE911RemoveLocationOutput v1E911LocationLocationIDDelete (String locationID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'locationID' is set
    if (locationID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'locationID' when calling v1E911LocationLocationIDDelete",
        new ApiException(400, "Missing the required parameter 'locationID' when calling v1E911LocationLocationIDDelete"));
    }

    // create path and map variables
    String path = "/v1/e911/location/{locationID}".replaceAll("\\{" + "locationID" + "\\}", apiInvoker.escapeString(locationID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocE911RemoveLocationOutput) ApiInvoker.deserialize(localVarResponse, "", ServiceDocE911RemoveLocationOutput.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete E911 Location
   * Remove the location.
   * @param locationID Location ID
  */
  public void v1E911LocationLocationIDDelete (String locationID, final Response.Listener<ServiceDocE911RemoveLocationOutput> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'locationID' is set
    if (locationID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'locationID' when calling v1E911LocationLocationIDDelete",
        new ApiException(400, "Missing the required parameter 'locationID' when calling v1E911LocationLocationIDDelete"));
    }

    // create path and map variables
    String path = "/v1/e911/location/{locationID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "locationID" + "\\}", apiInvoker.escapeString(locationID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocE911RemoveLocationOutput) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocE911RemoveLocationOutput.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Validate a Location
  * Validate the location details.
   * @param reqBody location details
   * @return ServiceDocE911ValidateLocationOutput
  */
  public ServiceDocE911ValidateLocationOutput v1E911LocationValidatePut (ServiceE911ValidateLocationInput reqBody) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = reqBody;
    // verify the required parameter 'reqBody' is set
    if (reqBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'reqBody' when calling v1E911LocationValidatePut",
        new ApiException(400, "Missing the required parameter 'reqBody' when calling v1E911LocationValidatePut"));
    }

    // create path and map variables
    String path = "/v1/e911/location/validate";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocE911ValidateLocationOutput) ApiInvoker.deserialize(localVarResponse, "", ServiceDocE911ValidateLocationOutput.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Validate a Location
   * Validate the location details.
   * @param reqBody location details
  */
  public void v1E911LocationValidatePut (ServiceE911ValidateLocationInput reqBody, final Response.Listener<ServiceDocE911ValidateLocationOutput> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = reqBody;

    // verify the required parameter 'reqBody' is set
    if (reqBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'reqBody' when calling v1E911LocationValidatePut",
        new ApiException(400, "Missing the required parameter 'reqBody' when calling v1E911LocationValidatePut"));
    }

    // create path and map variables
    String path = "/v1/e911/location/validate".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocE911ValidateLocationOutput) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocE911ValidateLocationOutput.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete E911 Phone Number
  * Delete the e911 URI connected with the account URI.
   * @param phoneNumber Phone Number
   * @return ServiceDocE911RemoveURIApiOutput
  */
  public ServiceDocE911RemoveURIApiOutput v1E911PhoneNumberDelete (String phoneNumber) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'phoneNumber' is set
    if (phoneNumber == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'phoneNumber' when calling v1E911PhoneNumberDelete",
        new ApiException(400, "Missing the required parameter 'phoneNumber' when calling v1E911PhoneNumberDelete"));
    }

    // create path and map variables
    String path = "/v1/e911/{phoneNumber}".replaceAll("\\{" + "phoneNumber" + "\\}", apiInvoker.escapeString(phoneNumber.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocE911RemoveURIApiOutput) ApiInvoker.deserialize(localVarResponse, "", ServiceDocE911RemoveURIApiOutput.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete E911 Phone Number
   * Delete the e911 URI connected with the account URI.
   * @param phoneNumber Phone Number
  */
  public void v1E911PhoneNumberDelete (String phoneNumber, final Response.Listener<ServiceDocE911RemoveURIApiOutput> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'phoneNumber' is set
    if (phoneNumber == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'phoneNumber' when calling v1E911PhoneNumberDelete",
        new ApiException(400, "Missing the required parameter 'phoneNumber' when calling v1E911PhoneNumberDelete"));
    }

    // create path and map variables
    String path = "/v1/e911/{phoneNumber}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "phoneNumber" + "\\}", apiInvoker.escapeString(phoneNumber.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocE911RemoveURIApiOutput) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocE911RemoveURIApiOutput.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Actvie Location for a Phone Number
  * Get the e911 location connected with the URI.
   * @param phoneNumber Phone Number
   * @return ServiceDocE911ActiveLocationURIApiOutput
  */
  public ServiceDocE911ActiveLocationURIApiOutput v1E911PhoneNumberLocationActiveGet (String phoneNumber) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'phoneNumber' is set
    if (phoneNumber == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'phoneNumber' when calling v1E911PhoneNumberLocationActiveGet",
        new ApiException(400, "Missing the required parameter 'phoneNumber' when calling v1E911PhoneNumberLocationActiveGet"));
    }

    // create path and map variables
    String path = "/v1/e911/{phoneNumber}/location/active".replaceAll("\\{" + "phoneNumber" + "\\}", apiInvoker.escapeString(phoneNumber.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocE911ActiveLocationURIApiOutput) ApiInvoker.deserialize(localVarResponse, "", ServiceDocE911ActiveLocationURIApiOutput.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Actvie Location for a Phone Number
   * Get the e911 location connected with the URI.
   * @param phoneNumber Phone Number
  */
  public void v1E911PhoneNumberLocationActiveGet (String phoneNumber, final Response.Listener<ServiceDocE911ActiveLocationURIApiOutput> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'phoneNumber' is set
    if (phoneNumber == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'phoneNumber' when calling v1E911PhoneNumberLocationActiveGet",
        new ApiException(400, "Missing the required parameter 'phoneNumber' when calling v1E911PhoneNumberLocationActiveGet"));
    }

    // create path and map variables
    String path = "/v1/e911/{phoneNumber}/location/active".replaceAll("\\{format\\}","json").replaceAll("\\{" + "phoneNumber" + "\\}", apiInvoker.escapeString(phoneNumber.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocE911ActiveLocationURIApiOutput) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocE911ActiveLocationURIApiOutput.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Location List for Phone Number
  * Access a list of the e911 locations associated with the provided URI.
   * @param phoneNumber Phone Number
   * @return ServiceDocE911LocationsURIApiOutput
  */
  public ServiceDocE911LocationsURIApiOutput v1E911PhoneNumberLocationGet (String phoneNumber) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'phoneNumber' is set
    if (phoneNumber == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'phoneNumber' when calling v1E911PhoneNumberLocationGet",
        new ApiException(400, "Missing the required parameter 'phoneNumber' when calling v1E911PhoneNumberLocationGet"));
    }

    // create path and map variables
    String path = "/v1/e911/{phoneNumber}/location".replaceAll("\\{" + "phoneNumber" + "\\}", apiInvoker.escapeString(phoneNumber.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocE911LocationsURIApiOutput) ApiInvoker.deserialize(localVarResponse, "", ServiceDocE911LocationsURIApiOutput.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Location List for Phone Number
   * Access a list of the e911 locations associated with the provided URI.
   * @param phoneNumber Phone Number
  */
  public void v1E911PhoneNumberLocationGet (String phoneNumber, final Response.Listener<ServiceDocE911LocationsURIApiOutput> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'phoneNumber' is set
    if (phoneNumber == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'phoneNumber' when calling v1E911PhoneNumberLocationGet",
        new ApiException(400, "Missing the required parameter 'phoneNumber' when calling v1E911PhoneNumberLocationGet"));
    }

    // create path and map variables
    String path = "/v1/e911/{phoneNumber}/location".replaceAll("\\{format\\}","json").replaceAll("\\{" + "phoneNumber" + "\\}", apiInvoker.escapeString(phoneNumber.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocE911LocationsURIApiOutput) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocE911LocationsURIApiOutput.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create an E911 Location
  * Enter new location details.
   * @param reqBody location details
   * @return ServiceDocE911AddLocationOutput
  */
  public ServiceDocE911AddLocationOutput v1E911Post (ServiceE911AddLocationInput reqBody) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = reqBody;
    // verify the required parameter 'reqBody' is set
    if (reqBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'reqBody' when calling v1E911Post",
        new ApiException(400, "Missing the required parameter 'reqBody' when calling v1E911Post"));
    }

    // create path and map variables
    String path = "/v1/e911";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocE911AddLocationOutput) ApiInvoker.deserialize(localVarResponse, "", ServiceDocE911AddLocationOutput.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create an E911 Location
   * Enter new location details.
   * @param reqBody location details
  */
  public void v1E911Post (ServiceE911AddLocationInput reqBody, final Response.Listener<ServiceDocE911AddLocationOutput> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = reqBody;

    // verify the required parameter 'reqBody' is set
    if (reqBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'reqBody' when calling v1E911Post",
        new ApiException(400, "Missing the required parameter 'reqBody' when calling v1E911Post"));
    }

    // create path and map variables
    String path = "/v1/e911".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocE911AddLocationOutput) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocE911AddLocationOutput.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
