/**
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.CPAASError;
import org.openapitools.client.model.ServiceDocsImpersonateUserGetSingle;
import org.openapitools.client.model.ServiceDocsUserGetAll;
import org.openapitools.client.model.ServiceDocsUserGetSingle;
import org.openapitools.client.model.ServiceVOIPImpersonateUser;
import org.openapitools.client.model.ServiceVOIPUserAdd2;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class VoIPUserApi {
  String basePath = "http://api.beta.cpaaslabs.net";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Get User List
  * Get a list of all VoIP users that includes first and last names, email addresses, extensions, and account statuses.
   * @param accountid Account ID, 32 alpha numeric
   * @param startKey start_key for pagination that was returned as next_start_key from your previous call
   * @param pageSize number of records to return, range 1 to 50
   * @return ServiceDocsUserGetAll
  */
  public ServiceDocsUserGetAll v1AccountAccountidUserGet (String accountid, String startKey, Integer pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountid' when calling v1AccountAccountidUserGet",
        new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidUserGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountid}/user".replaceAll("\\{" + "accountid" + "\\}", apiInvoker.escapeString(accountid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_key", startKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsUserGetAll) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsUserGetAll.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get User List
   * Get a list of all VoIP users that includes first and last names, email addresses, extensions, and account statuses.
   * @param accountid Account ID, 32 alpha numeric   * @param startKey start_key for pagination that was returned as next_start_key from your previous call   * @param pageSize number of records to return, range 1 to 50
  */
  public void v1AccountAccountidUserGet (String accountid, String startKey, Integer pageSize, final Response.Listener<ServiceDocsUserGetAll> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountid' when calling v1AccountAccountidUserGet",
        new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidUserGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountid}/user".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountid" + "\\}", apiInvoker.escapeString(accountid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_key", startKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsUserGetAll) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsUserGetAll.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create User
  * Add new users to the account. When a user is added, the system generates their unique 32 alpha numeric ID.
   * @param accountid Account ID, 32 alpha numeric
   * @param user user fields
   * @return ServiceDocsUserGetSingle
  */
  public ServiceDocsUserGetSingle v1AccountAccountidUserPost (String accountid, ServiceVOIPUserAdd2 user) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = user;
    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountid' when calling v1AccountAccountidUserPost",
        new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidUserPost"));
    }
    // verify the required parameter 'user' is set
    if (user == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'user' when calling v1AccountAccountidUserPost",
        new ApiException(400, "Missing the required parameter 'user' when calling v1AccountAccountidUserPost"));
    }

    // create path and map variables
    String path = "/v1/account/{accountid}/user".replaceAll("\\{" + "accountid" + "\\}", apiInvoker.escapeString(accountid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsUserGetSingle) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsUserGetSingle.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create User
   * Add new users to the account. When a user is added, the system generates their unique 32 alpha numeric ID.
   * @param accountid Account ID, 32 alpha numeric   * @param user user fields
  */
  public void v1AccountAccountidUserPost (String accountid, ServiceVOIPUserAdd2 user, final Response.Listener<ServiceDocsUserGetSingle> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = user;

    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountid' when calling v1AccountAccountidUserPost",
        new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidUserPost"));
    }
    // verify the required parameter 'user' is set
    if (user == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'user' when calling v1AccountAccountidUserPost",
        new ApiException(400, "Missing the required parameter 'user' when calling v1AccountAccountidUserPost"));
    }

    // create path and map variables
    String path = "/v1/account/{accountid}/user".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountid" + "\\}", apiInvoker.escapeString(accountid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsUserGetSingle) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsUserGetSingle.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete User
  * Delete VoIP user access to maintain the security of your accounts.
   * @param accountid Account ID, 32 alpha numeric
   * @param userid User ID, 32 alpha numeric
   * @return ServiceDocsUserGetSingle
  */
  public ServiceDocsUserGetSingle v1AccountAccountidUserUseridDelete (String accountid, String userid) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountid' when calling v1AccountAccountidUserUseridDelete",
        new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidUserUseridDelete"));
    }
    // verify the required parameter 'userid' is set
    if (userid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userid' when calling v1AccountAccountidUserUseridDelete",
        new ApiException(400, "Missing the required parameter 'userid' when calling v1AccountAccountidUserUseridDelete"));
    }

    // create path and map variables
    String path = "/v1/account/{accountid}/user/{userid}".replaceAll("\\{" + "accountid" + "\\}", apiInvoker.escapeString(accountid.toString())).replaceAll("\\{" + "userid" + "\\}", apiInvoker.escapeString(userid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsUserGetSingle) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsUserGetSingle.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete User
   * Delete VoIP user access to maintain the security of your accounts.
   * @param accountid Account ID, 32 alpha numeric   * @param userid User ID, 32 alpha numeric
  */
  public void v1AccountAccountidUserUseridDelete (String accountid, String userid, final Response.Listener<ServiceDocsUserGetSingle> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountid' when calling v1AccountAccountidUserUseridDelete",
        new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidUserUseridDelete"));
    }
    // verify the required parameter 'userid' is set
    if (userid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userid' when calling v1AccountAccountidUserUseridDelete",
        new ApiException(400, "Missing the required parameter 'userid' when calling v1AccountAccountidUserUseridDelete"));
    }

    // create path and map variables
    String path = "/v1/account/{accountid}/user/{userid}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountid" + "\\}", apiInvoker.escapeString(accountid.toString())).replaceAll("\\{" + "userid" + "\\}", apiInvoker.escapeString(userid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsUserGetSingle) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsUserGetSingle.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get User Details
  * View specific user details.
   * @param accountid Account ID, 32 alpha numeric
   * @param userid User ID, 32 alpha numeric
   * @return ServiceDocsUserGetSingle
  */
  public ServiceDocsUserGetSingle v1AccountAccountidUserUseridGet (String accountid, String userid) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountid' when calling v1AccountAccountidUserUseridGet",
        new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidUserUseridGet"));
    }
    // verify the required parameter 'userid' is set
    if (userid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userid' when calling v1AccountAccountidUserUseridGet",
        new ApiException(400, "Missing the required parameter 'userid' when calling v1AccountAccountidUserUseridGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountid}/user/{userid}".replaceAll("\\{" + "accountid" + "\\}", apiInvoker.escapeString(accountid.toString())).replaceAll("\\{" + "userid" + "\\}", apiInvoker.escapeString(userid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsUserGetSingle) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsUserGetSingle.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get User Details
   * View specific user details.
   * @param accountid Account ID, 32 alpha numeric   * @param userid User ID, 32 alpha numeric
  */
  public void v1AccountAccountidUserUseridGet (String accountid, String userid, final Response.Listener<ServiceDocsUserGetSingle> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountid' when calling v1AccountAccountidUserUseridGet",
        new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidUserUseridGet"));
    }
    // verify the required parameter 'userid' is set
    if (userid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userid' when calling v1AccountAccountidUserUseridGet",
        new ApiException(400, "Missing the required parameter 'userid' when calling v1AccountAccountidUserUseridGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountid}/user/{userid}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountid" + "\\}", apiInvoker.escapeString(accountid.toString())).replaceAll("\\{" + "userid" + "\\}", apiInvoker.escapeString(userid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsUserGetSingle) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsUserGetSingle.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update User
  * Keep user information current. Modify the first and last name, extension, and other pertinent information.
   * @param accountid Account ID, 32 alpha numeric
   * @param userid User ID, 32 alpha numeric
   * @param user user fields
   * @return ServiceDocsUserGetSingle
  */
  public ServiceDocsUserGetSingle v1AccountAccountidUserUseridPut (String accountid, String userid, ServiceVOIPUserAdd2 user) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = user;
    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountid' when calling v1AccountAccountidUserUseridPut",
        new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidUserUseridPut"));
    }
    // verify the required parameter 'userid' is set
    if (userid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userid' when calling v1AccountAccountidUserUseridPut",
        new ApiException(400, "Missing the required parameter 'userid' when calling v1AccountAccountidUserUseridPut"));
    }
    // verify the required parameter 'user' is set
    if (user == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'user' when calling v1AccountAccountidUserUseridPut",
        new ApiException(400, "Missing the required parameter 'user' when calling v1AccountAccountidUserUseridPut"));
    }

    // create path and map variables
    String path = "/v1/account/{accountid}/user/{userid}".replaceAll("\\{" + "accountid" + "\\}", apiInvoker.escapeString(accountid.toString())).replaceAll("\\{" + "userid" + "\\}", apiInvoker.escapeString(userid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsUserGetSingle) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsUserGetSingle.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update User
   * Keep user information current. Modify the first and last name, extension, and other pertinent information.
   * @param accountid Account ID, 32 alpha numeric   * @param userid User ID, 32 alpha numeric   * @param user user fields
  */
  public void v1AccountAccountidUserUseridPut (String accountid, String userid, ServiceVOIPUserAdd2 user, final Response.Listener<ServiceDocsUserGetSingle> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = user;

    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountid' when calling v1AccountAccountidUserUseridPut",
        new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidUserUseridPut"));
    }
    // verify the required parameter 'userid' is set
    if (userid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userid' when calling v1AccountAccountidUserUseridPut",
        new ApiException(400, "Missing the required parameter 'userid' when calling v1AccountAccountidUserUseridPut"));
    }
    // verify the required parameter 'user' is set
    if (user == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'user' when calling v1AccountAccountidUserUseridPut",
        new ApiException(400, "Missing the required parameter 'user' when calling v1AccountAccountidUserUseridPut"));
    }

    // create path and map variables
    String path = "/v1/account/{accountid}/user/{userid}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountid" + "\\}", apiInvoker.escapeString(accountid.toString())).replaceAll("\\{" + "userid" + "\\}", apiInvoker.escapeString(userid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsUserGetSingle) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsUserGetSingle.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Impersonate a User
  * Retrieve a token for making presence calls.
   * @param accountid Account ID, 32 alpha numeric
   * @param userid User ID, 32 alpha numeric
   * @param user Payload for impersonate a user
   * @return ServiceDocsImpersonateUserGetSingle
  */
  public ServiceDocsImpersonateUserGetSingle v1AccountAccountidUserUseridUserauthPost (String accountid, String userid, ServiceVOIPImpersonateUser user) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = user;
    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountid' when calling v1AccountAccountidUserUseridUserauthPost",
        new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidUserUseridUserauthPost"));
    }
    // verify the required parameter 'userid' is set
    if (userid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userid' when calling v1AccountAccountidUserUseridUserauthPost",
        new ApiException(400, "Missing the required parameter 'userid' when calling v1AccountAccountidUserUseridUserauthPost"));
    }
    // verify the required parameter 'user' is set
    if (user == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'user' when calling v1AccountAccountidUserUseridUserauthPost",
        new ApiException(400, "Missing the required parameter 'user' when calling v1AccountAccountidUserUseridUserauthPost"));
    }

    // create path and map variables
    String path = "/v1/account/{accountid}/user/{userid}/userauth".replaceAll("\\{" + "accountid" + "\\}", apiInvoker.escapeString(accountid.toString())).replaceAll("\\{" + "userid" + "\\}", apiInvoker.escapeString(userid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsImpersonateUserGetSingle) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsImpersonateUserGetSingle.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Impersonate a User
   * Retrieve a token for making presence calls.
   * @param accountid Account ID, 32 alpha numeric   * @param userid User ID, 32 alpha numeric   * @param user Payload for impersonate a user
  */
  public void v1AccountAccountidUserUseridUserauthPost (String accountid, String userid, ServiceVOIPImpersonateUser user, final Response.Listener<ServiceDocsImpersonateUserGetSingle> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = user;

    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountid' when calling v1AccountAccountidUserUseridUserauthPost",
        new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidUserUseridUserauthPost"));
    }
    // verify the required parameter 'userid' is set
    if (userid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userid' when calling v1AccountAccountidUserUseridUserauthPost",
        new ApiException(400, "Missing the required parameter 'userid' when calling v1AccountAccountidUserUseridUserauthPost"));
    }
    // verify the required parameter 'user' is set
    if (user == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'user' when calling v1AccountAccountidUserUseridUserauthPost",
        new ApiException(400, "Missing the required parameter 'user' when calling v1AccountAccountidUserUseridUserauthPost"));
    }

    // create path and map variables
    String path = "/v1/account/{accountid}/user/{userid}/userauth".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountid" + "\\}", apiInvoker.escapeString(accountid.toString())).replaceAll("\\{" + "userid" + "\\}", apiInvoker.escapeString(userid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsImpersonateUserGetSingle) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsImpersonateUserGetSingle.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
