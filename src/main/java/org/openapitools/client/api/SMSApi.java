/**
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import java.math.BigDecimal;
import org.openapitools.client.model.CPAASError;
import org.openapitools.client.model.ServiceCampaignTagDetagPhonenumbers;
import org.openapitools.client.model.ServiceDocsCampaignImportOutput;
import org.openapitools.client.model.ServiceDocsCampaignImportedGetAllOutput;
import org.openapitools.client.model.ServiceDocsCampaignPhoneNumberOutput;
import org.openapitools.client.model.ServiceDocsCampaignTagDetagPhonenumbersOutput;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class SMSApi {
  String basePath = "http://api.beta.cpaaslabs.net";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * 
  * Get details about a single imported campaign in an account.
   * @param accountID Account ID, 32 alpha numeric
   * @param campaignID Campaign ID
   * @return ServiceDocsCampaignImportOutput
  */
  public ServiceDocsCampaignImportOutput v1SmsAccountAccountIDCampaignCampaignIDImportGet (String accountID, String campaignID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1SmsAccountAccountIDCampaignCampaignIDImportGet",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1SmsAccountAccountIDCampaignCampaignIDImportGet"));
    }
    // verify the required parameter 'campaignID' is set
    if (campaignID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'campaignID' when calling v1SmsAccountAccountIDCampaignCampaignIDImportGet",
        new ApiException(400, "Missing the required parameter 'campaignID' when calling v1SmsAccountAccountIDCampaignCampaignIDImportGet"));
    }

    // create path and map variables
    String path = "/v1/sms/account/{accountID}/campaign/{campaignID}/import".replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "campaignID" + "\\}", apiInvoker.escapeString(campaignID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsCampaignImportOutput) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsCampaignImportOutput.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get details about a single imported campaign in an account.
   * @param accountID Account ID, 32 alpha numeric   * @param campaignID Campaign ID
  */
  public void v1SmsAccountAccountIDCampaignCampaignIDImportGet (String accountID, String campaignID, final Response.Listener<ServiceDocsCampaignImportOutput> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1SmsAccountAccountIDCampaignCampaignIDImportGet",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1SmsAccountAccountIDCampaignCampaignIDImportGet"));
    }
    // verify the required parameter 'campaignID' is set
    if (campaignID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'campaignID' when calling v1SmsAccountAccountIDCampaignCampaignIDImportGet",
        new ApiException(400, "Missing the required parameter 'campaignID' when calling v1SmsAccountAccountIDCampaignCampaignIDImportGet"));
    }

    // create path and map variables
    String path = "/v1/sms/account/{accountID}/campaign/{campaignID}/import".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "campaignID" + "\\}", apiInvoker.escapeString(campaignID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsCampaignImportOutput) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsCampaignImportOutput.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Import campaign
   * @param accountID Account ID, 32 alpha numeric
   * @param campaignID Campaign ID
   * @return ServiceDocsCampaignImportOutput
  */
  public ServiceDocsCampaignImportOutput v1SmsAccountAccountIDCampaignCampaignIDImportPost (String accountID, String campaignID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1SmsAccountAccountIDCampaignCampaignIDImportPost",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1SmsAccountAccountIDCampaignCampaignIDImportPost"));
    }
    // verify the required parameter 'campaignID' is set
    if (campaignID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'campaignID' when calling v1SmsAccountAccountIDCampaignCampaignIDImportPost",
        new ApiException(400, "Missing the required parameter 'campaignID' when calling v1SmsAccountAccountIDCampaignCampaignIDImportPost"));
    }

    // create path and map variables
    String path = "/v1/sms/account/{accountID}/campaign/{campaignID}/import".replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "campaignID" + "\\}", apiInvoker.escapeString(campaignID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsCampaignImportOutput) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsCampaignImportOutput.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Import campaign
   * @param accountID Account ID, 32 alpha numeric   * @param campaignID Campaign ID
  */
  public void v1SmsAccountAccountIDCampaignCampaignIDImportPost (String accountID, String campaignID, final Response.Listener<ServiceDocsCampaignImportOutput> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1SmsAccountAccountIDCampaignCampaignIDImportPost",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1SmsAccountAccountIDCampaignCampaignIDImportPost"));
    }
    // verify the required parameter 'campaignID' is set
    if (campaignID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'campaignID' when calling v1SmsAccountAccountIDCampaignCampaignIDImportPost",
        new ApiException(400, "Missing the required parameter 'campaignID' when calling v1SmsAccountAccountIDCampaignCampaignIDImportPost"));
    }

    // create path and map variables
    String path = "/v1/sms/account/{accountID}/campaign/{campaignID}/import".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "campaignID" + "\\}", apiInvoker.escapeString(campaignID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsCampaignImportOutput) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsCampaignImportOutput.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get telephone numbers associated with a campaign.
   * @param accountID Account ID, 32 alpha numeric
   * @param campaignID Campaign ID
   * @param pageNum Page number
   * @param pageSize Page size
   * @return ServiceDocsCampaignPhoneNumberOutput
  */
  public ServiceDocsCampaignPhoneNumberOutput v1SmsAccountAccountIDCampaignCampaignIDPhonenumberGet (String accountID, String campaignID, BigDecimal pageNum, BigDecimal pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1SmsAccountAccountIDCampaignCampaignIDPhonenumberGet",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1SmsAccountAccountIDCampaignCampaignIDPhonenumberGet"));
    }
    // verify the required parameter 'campaignID' is set
    if (campaignID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'campaignID' when calling v1SmsAccountAccountIDCampaignCampaignIDPhonenumberGet",
        new ApiException(400, "Missing the required parameter 'campaignID' when calling v1SmsAccountAccountIDCampaignCampaignIDPhonenumberGet"));
    }

    // create path and map variables
    String path = "/v1/sms/account/{accountID}/campaign/{campaignID}/phonenumber".replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "campaignID" + "\\}", apiInvoker.escapeString(campaignID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsCampaignPhoneNumberOutput) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsCampaignPhoneNumberOutput.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get telephone numbers associated with a campaign.
   * @param accountID Account ID, 32 alpha numeric   * @param campaignID Campaign ID   * @param pageNum Page number   * @param pageSize Page size
  */
  public void v1SmsAccountAccountIDCampaignCampaignIDPhonenumberGet (String accountID, String campaignID, BigDecimal pageNum, BigDecimal pageSize, final Response.Listener<ServiceDocsCampaignPhoneNumberOutput> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1SmsAccountAccountIDCampaignCampaignIDPhonenumberGet",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1SmsAccountAccountIDCampaignCampaignIDPhonenumberGet"));
    }
    // verify the required parameter 'campaignID' is set
    if (campaignID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'campaignID' when calling v1SmsAccountAccountIDCampaignCampaignIDPhonenumberGet",
        new ApiException(400, "Missing the required parameter 'campaignID' when calling v1SmsAccountAccountIDCampaignCampaignIDPhonenumberGet"));
    }

    // create path and map variables
    String path = "/v1/sms/account/{accountID}/campaign/{campaignID}/phonenumber".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "campaignID" + "\\}", apiInvoker.escapeString(campaignID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsCampaignPhoneNumberOutput) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsCampaignPhoneNumberOutput.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Associate or dissociate telephone numbers with a campaign.
   * @param accountID Account ID, 32 alpha numeric
   * @param campaignID Campaign ID, 32 alpha numeric
   * @param reqBody payload fields
   * @return ServiceDocsCampaignTagDetagPhonenumbersOutput
  */
  public ServiceDocsCampaignTagDetagPhonenumbersOutput v1SmsAccountAccountIDCampaignCampaignIDPhonenumberPut (String accountID, String campaignID, ServiceCampaignTagDetagPhonenumbers reqBody) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = reqBody;
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1SmsAccountAccountIDCampaignCampaignIDPhonenumberPut",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1SmsAccountAccountIDCampaignCampaignIDPhonenumberPut"));
    }
    // verify the required parameter 'campaignID' is set
    if (campaignID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'campaignID' when calling v1SmsAccountAccountIDCampaignCampaignIDPhonenumberPut",
        new ApiException(400, "Missing the required parameter 'campaignID' when calling v1SmsAccountAccountIDCampaignCampaignIDPhonenumberPut"));
    }
    // verify the required parameter 'reqBody' is set
    if (reqBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'reqBody' when calling v1SmsAccountAccountIDCampaignCampaignIDPhonenumberPut",
        new ApiException(400, "Missing the required parameter 'reqBody' when calling v1SmsAccountAccountIDCampaignCampaignIDPhonenumberPut"));
    }

    // create path and map variables
    String path = "/v1/sms/account/{accountID}/campaign/{campaignID}/phonenumber".replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "campaignID" + "\\}", apiInvoker.escapeString(campaignID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsCampaignTagDetagPhonenumbersOutput) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsCampaignTagDetagPhonenumbersOutput.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Associate or dissociate telephone numbers with a campaign.
   * @param accountID Account ID, 32 alpha numeric   * @param campaignID Campaign ID, 32 alpha numeric   * @param reqBody payload fields
  */
  public void v1SmsAccountAccountIDCampaignCampaignIDPhonenumberPut (String accountID, String campaignID, ServiceCampaignTagDetagPhonenumbers reqBody, final Response.Listener<ServiceDocsCampaignTagDetagPhonenumbersOutput> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = reqBody;

    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1SmsAccountAccountIDCampaignCampaignIDPhonenumberPut",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1SmsAccountAccountIDCampaignCampaignIDPhonenumberPut"));
    }
    // verify the required parameter 'campaignID' is set
    if (campaignID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'campaignID' when calling v1SmsAccountAccountIDCampaignCampaignIDPhonenumberPut",
        new ApiException(400, "Missing the required parameter 'campaignID' when calling v1SmsAccountAccountIDCampaignCampaignIDPhonenumberPut"));
    }
    // verify the required parameter 'reqBody' is set
    if (reqBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'reqBody' when calling v1SmsAccountAccountIDCampaignCampaignIDPhonenumberPut",
        new ApiException(400, "Missing the required parameter 'reqBody' when calling v1SmsAccountAccountIDCampaignCampaignIDPhonenumberPut"));
    }

    // create path and map variables
    String path = "/v1/sms/account/{accountID}/campaign/{campaignID}/phonenumber".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "campaignID" + "\\}", apiInvoker.escapeString(campaignID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsCampaignTagDetagPhonenumbersOutput) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsCampaignTagDetagPhonenumbersOutput.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get a list of all imported campaigns in an account.
   * @param accountID Account ID, 32 alpha numeric
   * @param pageNum Page number
   * @param pageSize Page size
   * @return ServiceDocsCampaignImportedGetAllOutput
  */
  public ServiceDocsCampaignImportedGetAllOutput v1SmsAccountAccountIDCampaignImportGet (String accountID, BigDecimal pageNum, BigDecimal pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1SmsAccountAccountIDCampaignImportGet",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1SmsAccountAccountIDCampaignImportGet"));
    }

    // create path and map variables
    String path = "/v1/sms/account/{accountID}/campaign/import".replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsCampaignImportedGetAllOutput) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsCampaignImportedGetAllOutput.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get a list of all imported campaigns in an account.
   * @param accountID Account ID, 32 alpha numeric   * @param pageNum Page number   * @param pageSize Page size
  */
  public void v1SmsAccountAccountIDCampaignImportGet (String accountID, BigDecimal pageNum, BigDecimal pageSize, final Response.Listener<ServiceDocsCampaignImportedGetAllOutput> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1SmsAccountAccountIDCampaignImportGet",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1SmsAccountAccountIDCampaignImportGet"));
    }

    // create path and map variables
    String path = "/v1/sms/account/{accountID}/campaign/import".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsCampaignImportedGetAllOutput) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsCampaignImportedGetAllOutput.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
