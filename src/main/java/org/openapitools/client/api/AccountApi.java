/**
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.CPAASError;
import org.openapitools.client.model.ServiceDocsAccountAPIKey;
import org.openapitools.client.model.ServiceDocsAccountGetAll;
import org.openapitools.client.model.ServiceDocsAccountGetSingle;
import org.openapitools.client.model.ServiceDocsAccountLimit;
import org.openapitools.client.model.ServiceDocsAccountProvisioning;
import org.openapitools.client.model.ServiceUpdateRecordTypeForAccount;
import org.openapitools.client.model.ServiceVOIPAccountAddData;
import org.openapitools.client.model.ServiceVOIPAccountEditData;
import org.openapitools.client.model.ServiceVOIPAccountLimit2;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class AccountApi {
  String basePath = "http://api.beta.cpaaslabs.net";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Get Sub Account List
  * Conveniently access the list of children accounts.
   * @param accountid Account ID, 32 alpha numeric
   * @param startKey start_key for pagination that was returned as next_start_key from your previous call
   * @param pageSize number of records to return, range 1 to 50
   * @return ServiceDocsAccountGetAll
  */
  public ServiceDocsAccountGetAll v1AccountAccountidChildrenGet (String accountid, String startKey, Integer pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountid' when calling v1AccountAccountidChildrenGet",
        new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidChildrenGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountid}/children".replaceAll("\\{" + "accountid" + "\\}", apiInvoker.escapeString(accountid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_key", startKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsAccountGetAll) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsAccountGetAll.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Sub Account List
   * Conveniently access the list of children accounts.
   * @param accountid Account ID, 32 alpha numeric   * @param startKey start_key for pagination that was returned as next_start_key from your previous call   * @param pageSize number of records to return, range 1 to 50
  */
  public void v1AccountAccountidChildrenGet (String accountid, String startKey, Integer pageSize, final Response.Listener<ServiceDocsAccountGetAll> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountid' when calling v1AccountAccountidChildrenGet",
        new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidChildrenGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountid}/children".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountid" + "\\}", apiInvoker.escapeString(accountid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_key", startKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsAccountGetAll) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsAccountGetAll.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete Account
  * Delete an account within your organization.
   * @param accountid Account ID, 32 alpha numeric
   * @return ServiceDocsAccountGetSingle
  */
  public ServiceDocsAccountGetSingle v1AccountAccountidDelete (String accountid) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountid' when calling v1AccountAccountidDelete",
        new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidDelete"));
    }

    // create path and map variables
    String path = "/v1/account/{accountid}".replaceAll("\\{" + "accountid" + "\\}", apiInvoker.escapeString(accountid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsAccountGetSingle) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsAccountGetSingle.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete Account
   * Delete an account within your organization.
   * @param accountid Account ID, 32 alpha numeric
  */
  public void v1AccountAccountidDelete (String accountid, final Response.Listener<ServiceDocsAccountGetSingle> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountid' when calling v1AccountAccountidDelete",
        new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidDelete"));
    }

    // create path and map variables
    String path = "/v1/account/{accountid}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountid" + "\\}", apiInvoker.escapeString(accountid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsAccountGetSingle) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsAccountGetSingle.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Account DNS Record
  * Get the DNS record of an account from the Route 53 entry.
   * @param accountid Account ID, 32 alpha numeric
   * @return ServiceDocsAccountGetSingle
  */
  public ServiceDocsAccountGetSingle v1AccountAccountidDnsrecordGet (String accountid) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountid' when calling v1AccountAccountidDnsrecordGet",
        new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidDnsrecordGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountid}/dnsrecord".replaceAll("\\{" + "accountid" + "\\}", apiInvoker.escapeString(accountid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsAccountGetSingle) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsAccountGetSingle.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Account DNS Record
   * Get the DNS record of an account from the Route 53 entry.
   * @param accountid Account ID, 32 alpha numeric
  */
  public void v1AccountAccountidDnsrecordGet (String accountid, final Response.Listener<ServiceDocsAccountGetSingle> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountid' when calling v1AccountAccountidDnsrecordGet",
        new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidDnsrecordGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountid}/dnsrecord".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountid" + "\\}", apiInvoker.escapeString(accountid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsAccountGetSingle) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsAccountGetSingle.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create Account DNS Record
  * Create the DNS record of an account with the help realm in the Route 53 entry.
   * @param accountid Account ID, 32 alpha numeric
   * @return ServiceDocsAccountGetSingle
  */
  public ServiceDocsAccountGetSingle v1AccountAccountidDnsrecordPost (String accountid) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountid' when calling v1AccountAccountidDnsrecordPost",
        new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidDnsrecordPost"));
    }

    // create path and map variables
    String path = "/v1/account/{accountid}/dnsrecord".replaceAll("\\{" + "accountid" + "\\}", apiInvoker.escapeString(accountid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsAccountGetSingle) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsAccountGetSingle.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create Account DNS Record
   * Create the DNS record of an account with the help realm in the Route 53 entry.
   * @param accountid Account ID, 32 alpha numeric
  */
  public void v1AccountAccountidDnsrecordPost (String accountid, final Response.Listener<ServiceDocsAccountGetSingle> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountid' when calling v1AccountAccountidDnsrecordPost",
        new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidDnsrecordPost"));
    }

    // create path and map variables
    String path = "/v1/account/{accountid}/dnsrecord".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountid" + "\\}", apiInvoker.escapeString(accountid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsAccountGetSingle) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsAccountGetSingle.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Convert Account DNS Record
  * Toggle the realm DNS record between srv and cname.
   * @param accountid Account ID, 32 alpha numeric
   * @param dnsrecord record type fields with value SRV, CNAME
   * @return ServiceDocsAccountGetSingle
  */
  public ServiceDocsAccountGetSingle v1AccountAccountidDnsrecordPut (String accountid, ServiceUpdateRecordTypeForAccount dnsrecord) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = dnsrecord;
    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountid' when calling v1AccountAccountidDnsrecordPut",
        new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidDnsrecordPut"));
    }
    // verify the required parameter 'dnsrecord' is set
    if (dnsrecord == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dnsrecord' when calling v1AccountAccountidDnsrecordPut",
        new ApiException(400, "Missing the required parameter 'dnsrecord' when calling v1AccountAccountidDnsrecordPut"));
    }

    // create path and map variables
    String path = "/v1/account/{accountid}/dnsrecord".replaceAll("\\{" + "accountid" + "\\}", apiInvoker.escapeString(accountid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsAccountGetSingle) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsAccountGetSingle.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Convert Account DNS Record
   * Toggle the realm DNS record between srv and cname.
   * @param accountid Account ID, 32 alpha numeric   * @param dnsrecord record type fields with value SRV, CNAME
  */
  public void v1AccountAccountidDnsrecordPut (String accountid, ServiceUpdateRecordTypeForAccount dnsrecord, final Response.Listener<ServiceDocsAccountGetSingle> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = dnsrecord;

    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountid' when calling v1AccountAccountidDnsrecordPut",
        new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidDnsrecordPut"));
    }
    // verify the required parameter 'dnsrecord' is set
    if (dnsrecord == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dnsrecord' when calling v1AccountAccountidDnsrecordPut",
        new ApiException(400, "Missing the required parameter 'dnsrecord' when calling v1AccountAccountidDnsrecordPut"));
    }

    // create path and map variables
    String path = "/v1/account/{accountid}/dnsrecord".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountid" + "\\}", apiInvoker.escapeString(accountid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsAccountGetSingle) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsAccountGetSingle.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Account Details
  * This endpoint will not allow for modifying or making updates, it will only allow users to view/retrieve details.
   * @param accountid Account ID, 32 alpha numeric
   * @return ServiceDocsAccountGetSingle
  */
  public ServiceDocsAccountGetSingle v1AccountAccountidGet (String accountid) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountid' when calling v1AccountAccountidGet",
        new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountid}".replaceAll("\\{" + "accountid" + "\\}", apiInvoker.escapeString(accountid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsAccountGetSingle) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsAccountGetSingle.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Account Details
   * This endpoint will not allow for modifying or making updates, it will only allow users to view/retrieve details.
   * @param accountid Account ID, 32 alpha numeric
  */
  public void v1AccountAccountidGet (String accountid, final Response.Listener<ServiceDocsAccountGetSingle> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountid' when calling v1AccountAccountidGet",
        new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountid}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountid" + "\\}", apiInvoker.escapeString(accountid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsAccountGetSingle) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsAccountGetSingle.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Account Limits
  * Check the maximum number of inbound, outbound, and two-way trunks.
   * @param accountid Account ID, 32 alpha numeric
   * @return ServiceDocsAccountLimit
  */
  public ServiceDocsAccountLimit v1AccountAccountidLimitGet (String accountid) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountid' when calling v1AccountAccountidLimitGet",
        new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidLimitGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountid}/limit".replaceAll("\\{" + "accountid" + "\\}", apiInvoker.escapeString(accountid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsAccountLimit) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsAccountLimit.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Account Limits
   * Check the maximum number of inbound, outbound, and two-way trunks.
   * @param accountid Account ID, 32 alpha numeric
  */
  public void v1AccountAccountidLimitGet (String accountid, final Response.Listener<ServiceDocsAccountLimit> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountid' when calling v1AccountAccountidLimitGet",
        new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidLimitGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountid}/limit".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountid" + "\\}", apiInvoker.escapeString(accountid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsAccountLimit) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsAccountLimit.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Set Account Limits
  * Apply parameters to restrict access to inbound, outbound, and two-way trunks.
   * @param accountid Account ID, 32 alpha numeric
   * @param limit account fields
   * @return ServiceDocsAccountLimit
  */
  public ServiceDocsAccountLimit v1AccountAccountidLimitPut (String accountid, ServiceVOIPAccountLimit2 limit) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = limit;
    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountid' when calling v1AccountAccountidLimitPut",
        new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidLimitPut"));
    }
    // verify the required parameter 'limit' is set
    if (limit == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'limit' when calling v1AccountAccountidLimitPut",
        new ApiException(400, "Missing the required parameter 'limit' when calling v1AccountAccountidLimitPut"));
    }

    // create path and map variables
    String path = "/v1/account/{accountid}/limit".replaceAll("\\{" + "accountid" + "\\}", apiInvoker.escapeString(accountid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsAccountLimit) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsAccountLimit.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Set Account Limits
   * Apply parameters to restrict access to inbound, outbound, and two-way trunks.
   * @param accountid Account ID, 32 alpha numeric   * @param limit account fields
  */
  public void v1AccountAccountidLimitPut (String accountid, ServiceVOIPAccountLimit2 limit, final Response.Listener<ServiceDocsAccountLimit> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = limit;

    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountid' when calling v1AccountAccountidLimitPut",
        new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidLimitPut"));
    }
    // verify the required parameter 'limit' is set
    if (limit == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'limit' when calling v1AccountAccountidLimitPut",
        new ApiException(400, "Missing the required parameter 'limit' when calling v1AccountAccountidLimitPut"));
    }

    // create path and map variables
    String path = "/v1/account/{accountid}/limit".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountid" + "\\}", apiInvoker.escapeString(accountid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsAccountLimit) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsAccountLimit.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create Sub Account
  * Establish a sub account to enable an administrator within your organization to create accounts.
   * @param accountid Account ID, 32 alpha numeric
   * @param account account fields
   * @return ServiceDocsAccountGetSingle
  */
  public ServiceDocsAccountGetSingle v1AccountAccountidPost (String accountid, ServiceVOIPAccountAddData account) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = account;
    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountid' when calling v1AccountAccountidPost",
        new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidPost"));
    }
    // verify the required parameter 'account' is set
    if (account == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'account' when calling v1AccountAccountidPost",
        new ApiException(400, "Missing the required parameter 'account' when calling v1AccountAccountidPost"));
    }

    // create path and map variables
    String path = "/v1/account/{accountid}".replaceAll("\\{" + "accountid" + "\\}", apiInvoker.escapeString(accountid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsAccountGetSingle) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsAccountGetSingle.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create Sub Account
   * Establish a sub account to enable an administrator within your organization to create accounts.
   * @param accountid Account ID, 32 alpha numeric   * @param account account fields
  */
  public void v1AccountAccountidPost (String accountid, ServiceVOIPAccountAddData account, final Response.Listener<ServiceDocsAccountGetSingle> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = account;

    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountid' when calling v1AccountAccountidPost",
        new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidPost"));
    }
    // verify the required parameter 'account' is set
    if (account == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'account' when calling v1AccountAccountidPost",
        new ApiException(400, "Missing the required parameter 'account' when calling v1AccountAccountidPost"));
    }

    // create path and map variables
    String path = "/v1/account/{accountid}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountid" + "\\}", apiInvoker.escapeString(accountid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsAccountGetSingle) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsAccountGetSingle.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Account Provisioning Details
  * Get the provisioning details of an account.
   * @param accountid Account ID, 32 alpha numeric
   * @return ServiceDocsAccountProvisioning
  */
  public ServiceDocsAccountProvisioning v1AccountAccountidProvisioningdetailsGet (String accountid) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountid' when calling v1AccountAccountidProvisioningdetailsGet",
        new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidProvisioningdetailsGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountid}/provisioningdetails".replaceAll("\\{" + "accountid" + "\\}", apiInvoker.escapeString(accountid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsAccountProvisioning) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsAccountProvisioning.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Account Provisioning Details
   * Get the provisioning details of an account.
   * @param accountid Account ID, 32 alpha numeric
  */
  public void v1AccountAccountidProvisioningdetailsGet (String accountid, final Response.Listener<ServiceDocsAccountProvisioning> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountid' when calling v1AccountAccountidProvisioningdetailsGet",
        new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidProvisioningdetailsGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountid}/provisioningdetails".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountid" + "\\}", apiInvoker.escapeString(accountid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsAccountProvisioning) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsAccountProvisioning.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Reset the provisioning details password.
  * Reset the existing provisioning details password and set it to a new one.
   * @param accountid Account ID, 32 alpha numeric
   * @return ServiceDocsAccountProvisioning
  */
  public ServiceDocsAccountProvisioning v1AccountAccountidProvisioningdetailsResetpwPut (String accountid) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountid' when calling v1AccountAccountidProvisioningdetailsResetpwPut",
        new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidProvisioningdetailsResetpwPut"));
    }

    // create path and map variables
    String path = "/v1/account/{accountid}/provisioningdetails/resetpw".replaceAll("\\{" + "accountid" + "\\}", apiInvoker.escapeString(accountid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsAccountProvisioning) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsAccountProvisioning.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Reset the provisioning details password.
   * Reset the existing provisioning details password and set it to a new one.
   * @param accountid Account ID, 32 alpha numeric
  */
  public void v1AccountAccountidProvisioningdetailsResetpwPut (String accountid, final Response.Listener<ServiceDocsAccountProvisioning> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountid' when calling v1AccountAccountidProvisioningdetailsResetpwPut",
        new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidProvisioningdetailsResetpwPut"));
    }

    // create path and map variables
    String path = "/v1/account/{accountid}/provisioningdetails/resetpw".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountid" + "\\}", apiInvoker.escapeString(accountid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsAccountProvisioning) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsAccountProvisioning.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update Account
  * Modify pertinent account data.
   * @param accountid Account ID, 32 alpha numeric
   * @param account account fields
   * @return ServiceDocsAccountGetSingle
  */
  public ServiceDocsAccountGetSingle v1AccountAccountidPut (String accountid, ServiceVOIPAccountEditData account) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = account;
    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountid' when calling v1AccountAccountidPut",
        new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidPut"));
    }
    // verify the required parameter 'account' is set
    if (account == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'account' when calling v1AccountAccountidPut",
        new ApiException(400, "Missing the required parameter 'account' when calling v1AccountAccountidPut"));
    }

    // create path and map variables
    String path = "/v1/account/{accountid}".replaceAll("\\{" + "accountid" + "\\}", apiInvoker.escapeString(accountid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsAccountGetSingle) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsAccountGetSingle.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update Account
   * Modify pertinent account data.
   * @param accountid Account ID, 32 alpha numeric   * @param account account fields
  */
  public void v1AccountAccountidPut (String accountid, ServiceVOIPAccountEditData account, final Response.Listener<ServiceDocsAccountGetSingle> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = account;

    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountid' when calling v1AccountAccountidPut",
        new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidPut"));
    }
    // verify the required parameter 'account' is set
    if (account == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'account' when calling v1AccountAccountidPut",
        new ApiException(400, "Missing the required parameter 'account' when calling v1AccountAccountidPut"));
    }

    // create path and map variables
    String path = "/v1/account/{accountid}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountid" + "\\}", apiInvoker.escapeString(accountid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsAccountGetSingle) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsAccountGetSingle.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Authenticate an application or user request to get the client ID and client secret for a CPaaS account.
   * @return ServiceDocsAccountAPIKey
  */
  public ServiceDocsAccountAPIKey v1AccountApikeyGet () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/v1/account/apikey";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsAccountAPIKey) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsAccountAPIKey.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Authenticate an application or user request to get the client ID and client secret for a CPaaS account.

  */
  public void v1AccountApikeyGet (final Response.Listener<ServiceDocsAccountAPIKey> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/v1/account/apikey".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsAccountAPIKey) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsAccountAPIKey.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Account List
  * Retrieve a list of all CPaaS accounts that exist within your organization.
   * @param startKey start_key for pagination that was returned as next_start_key from your previous call
   * @param pageSize number of records to return, range 1 to 50
   * @return ServiceDocsAccountGetAll
  */
  public ServiceDocsAccountGetAll v1AccountGet (String startKey, Integer pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/v1/account";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_key", startKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsAccountGetAll) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsAccountGetAll.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Account List
   * Retrieve a list of all CPaaS accounts that exist within your organization.
   * @param startKey start_key for pagination that was returned as next_start_key from your previous call   * @param pageSize number of records to return, range 1 to 50
  */
  public void v1AccountGet (String startKey, Integer pageSize, final Response.Listener<ServiceDocsAccountGetAll> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/v1/account".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_key", startKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsAccountGetAll) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsAccountGetAll.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create Account
  * Create an account.
   * @param account account fields
   * @return ServiceDocsAccountGetSingle
  */
  public ServiceDocsAccountGetSingle v1AccountPost (ServiceVOIPAccountAddData account) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = account;
    // verify the required parameter 'account' is set
    if (account == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'account' when calling v1AccountPost",
        new ApiException(400, "Missing the required parameter 'account' when calling v1AccountPost"));
    }

    // create path and map variables
    String path = "/v1/account";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsAccountGetSingle) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsAccountGetSingle.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create Account
   * Create an account.
   * @param account account fields
  */
  public void v1AccountPost (ServiceVOIPAccountAddData account, final Response.Listener<ServiceDocsAccountGetSingle> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = account;

    // verify the required parameter 'account' is set
    if (account == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'account' when calling v1AccountPost",
        new ApiException(400, "Missing the required parameter 'account' when calling v1AccountPost"));
    }

    // create path and map variables
    String path = "/v1/account".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsAccountGetSingle) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsAccountGetSingle.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
