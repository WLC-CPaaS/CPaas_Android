/**
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.CPAASError;
import java.io.File;
import org.openapitools.client.model.ServiceDocsMediaGetAll;
import org.openapitools.client.model.ServiceDocsMediaGetSingle;
import org.openapitools.client.model.ServiceVOIPMediaAddEditData;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class MediaApi {
  String basePath = "http://api.beta.cpaaslabs.net";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Get Media File
  * Gather data about the media objects in an account.
   * @param accountID Account ID, 32 alpha numeric
   * @param mediaID Media ID, 32 alpha numeric
   * @return File
  */
  public File v1AccountAccountIDMediaMediaIDFileGet (String accountID, String mediaID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDMediaMediaIDFileGet",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDMediaMediaIDFileGet"));
    }
    // verify the required parameter 'mediaID' is set
    if (mediaID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'mediaID' when calling v1AccountAccountIDMediaMediaIDFileGet",
        new ApiException(400, "Missing the required parameter 'mediaID' when calling v1AccountAccountIDMediaMediaIDFileGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/media/{mediaID}/file".replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "mediaID" + "\\}", apiInvoker.escapeString(mediaID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (File) ApiInvoker.deserialize(localVarResponse, "", File.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Media File
   * Gather data about the media objects in an account.
   * @param accountID Account ID, 32 alpha numeric   * @param mediaID Media ID, 32 alpha numeric
  */
  public void v1AccountAccountIDMediaMediaIDFileGet (String accountID, String mediaID, final Response.Listener<File> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDMediaMediaIDFileGet",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDMediaMediaIDFileGet"));
    }
    // verify the required parameter 'mediaID' is set
    if (mediaID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'mediaID' when calling v1AccountAccountIDMediaMediaIDFileGet",
        new ApiException(400, "Missing the required parameter 'mediaID' when calling v1AccountAccountIDMediaMediaIDFileGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/media/{mediaID}/file".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "mediaID" + "\\}", apiInvoker.escapeString(mediaID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((File) ApiInvoker.deserialize(localVarResponse,  "", File.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Add Media File
  * Include a media file that is connected to a media object in an account.
   * @param accountID Account ID, 32 alpha numeric
   * @param mediaID Media ID, 32 alpha numeric
   * @param file Media file
   * @return ServiceDocsMediaGetSingle
  */
  public ServiceDocsMediaGetSingle v1AccountAccountIDMediaMediaIDFilePost (String accountID, String mediaID, File file) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDMediaMediaIDFilePost",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDMediaMediaIDFilePost"));
    }
    // verify the required parameter 'mediaID' is set
    if (mediaID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'mediaID' when calling v1AccountAccountIDMediaMediaIDFilePost",
        new ApiException(400, "Missing the required parameter 'mediaID' when calling v1AccountAccountIDMediaMediaIDFilePost"));
    }
    // verify the required parameter 'file' is set
    if (file == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'file' when calling v1AccountAccountIDMediaMediaIDFilePost",
        new ApiException(400, "Missing the required parameter 'file' when calling v1AccountAccountIDMediaMediaIDFilePost"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/media/{mediaID}/file".replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "mediaID" + "\\}", apiInvoker.escapeString(mediaID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (file != null) {
        localVarBuilder.addBinaryBody("file", file);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsMediaGetSingle) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsMediaGetSingle.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Add Media File
   * Include a media file that is connected to a media object in an account.
   * @param accountID Account ID, 32 alpha numeric   * @param mediaID Media ID, 32 alpha numeric   * @param file Media file
  */
  public void v1AccountAccountIDMediaMediaIDFilePost (String accountID, String mediaID, File file, final Response.Listener<ServiceDocsMediaGetSingle> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDMediaMediaIDFilePost",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDMediaMediaIDFilePost"));
    }
    // verify the required parameter 'mediaID' is set
    if (mediaID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'mediaID' when calling v1AccountAccountIDMediaMediaIDFilePost",
        new ApiException(400, "Missing the required parameter 'mediaID' when calling v1AccountAccountIDMediaMediaIDFilePost"));
    }
    // verify the required parameter 'file' is set
    if (file == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'file' when calling v1AccountAccountIDMediaMediaIDFilePost",
        new ApiException(400, "Missing the required parameter 'file' when calling v1AccountAccountIDMediaMediaIDFilePost"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/media/{mediaID}/file".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "mediaID" + "\\}", apiInvoker.escapeString(mediaID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (file != null) {
        localVarBuilder.addBinaryBody("file", file);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsMediaGetSingle) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsMediaGetSingle.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Media List
  * View all media files for an account in your organization.
   * @param accountid Account ID, 32 alpha numeric
   * @param startKey start_key for pagination that was returned as next_start_key from your previous call
   * @param pageSize number of records to return, range 1 to 50
   * @return ServiceDocsMediaGetAll
  */
  public ServiceDocsMediaGetAll v1AccountAccountidMediaGet (String accountid, String startKey, Integer pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountid' when calling v1AccountAccountidMediaGet",
        new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidMediaGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountid}/media".replaceAll("\\{" + "accountid" + "\\}", apiInvoker.escapeString(accountid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_key", startKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsMediaGetAll) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsMediaGetAll.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Media List
   * View all media files for an account in your organization.
   * @param accountid Account ID, 32 alpha numeric   * @param startKey start_key for pagination that was returned as next_start_key from your previous call   * @param pageSize number of records to return, range 1 to 50
  */
  public void v1AccountAccountidMediaGet (String accountid, String startKey, Integer pageSize, final Response.Listener<ServiceDocsMediaGetAll> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountid' when calling v1AccountAccountidMediaGet",
        new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidMediaGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountid}/media".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountid" + "\\}", apiInvoker.escapeString(accountid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_key", startKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsMediaGetAll) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsMediaGetAll.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete Media
  * Remove a media file that is no longer in use from an account.
   * @param accountid Account ID, 32 alpha numeric
   * @param mediaid Device ID, 32 alpha numeric
   * @return ServiceDocsMediaGetSingle
  */
  public ServiceDocsMediaGetSingle v1AccountAccountidMediaMediaidDelete (String accountid, String mediaid) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountid' when calling v1AccountAccountidMediaMediaidDelete",
        new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidMediaMediaidDelete"));
    }
    // verify the required parameter 'mediaid' is set
    if (mediaid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'mediaid' when calling v1AccountAccountidMediaMediaidDelete",
        new ApiException(400, "Missing the required parameter 'mediaid' when calling v1AccountAccountidMediaMediaidDelete"));
    }

    // create path and map variables
    String path = "/v1/account/{accountid}/media/{mediaid}".replaceAll("\\{" + "accountid" + "\\}", apiInvoker.escapeString(accountid.toString())).replaceAll("\\{" + "mediaid" + "\\}", apiInvoker.escapeString(mediaid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsMediaGetSingle) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsMediaGetSingle.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete Media
   * Remove a media file that is no longer in use from an account.
   * @param accountid Account ID, 32 alpha numeric   * @param mediaid Device ID, 32 alpha numeric
  */
  public void v1AccountAccountidMediaMediaidDelete (String accountid, String mediaid, final Response.Listener<ServiceDocsMediaGetSingle> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountid' when calling v1AccountAccountidMediaMediaidDelete",
        new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidMediaMediaidDelete"));
    }
    // verify the required parameter 'mediaid' is set
    if (mediaid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'mediaid' when calling v1AccountAccountidMediaMediaidDelete",
        new ApiException(400, "Missing the required parameter 'mediaid' when calling v1AccountAccountidMediaMediaidDelete"));
    }

    // create path and map variables
    String path = "/v1/account/{accountid}/media/{mediaid}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountid" + "\\}", apiInvoker.escapeString(accountid.toString())).replaceAll("\\{" + "mediaid" + "\\}", apiInvoker.escapeString(mediaid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsMediaGetSingle) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsMediaGetSingle.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Media Details
  * Permit users to view an account&#39;s specific media information.
   * @param accountid Account ID, 32 alpha numeric
   * @param mediaid Media ID, 32 alpha numeric
   * @return ServiceDocsMediaGetSingle
  */
  public ServiceDocsMediaGetSingle v1AccountAccountidMediaMediaidGet (String accountid, String mediaid) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountid' when calling v1AccountAccountidMediaMediaidGet",
        new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidMediaMediaidGet"));
    }
    // verify the required parameter 'mediaid' is set
    if (mediaid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'mediaid' when calling v1AccountAccountidMediaMediaidGet",
        new ApiException(400, "Missing the required parameter 'mediaid' when calling v1AccountAccountidMediaMediaidGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountid}/media/{mediaid}".replaceAll("\\{" + "accountid" + "\\}", apiInvoker.escapeString(accountid.toString())).replaceAll("\\{" + "mediaid" + "\\}", apiInvoker.escapeString(mediaid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsMediaGetSingle) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsMediaGetSingle.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Media Details
   * Permit users to view an account&#39;s specific media information.
   * @param accountid Account ID, 32 alpha numeric   * @param mediaid Media ID, 32 alpha numeric
  */
  public void v1AccountAccountidMediaMediaidGet (String accountid, String mediaid, final Response.Listener<ServiceDocsMediaGetSingle> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountid' when calling v1AccountAccountidMediaMediaidGet",
        new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidMediaMediaidGet"));
    }
    // verify the required parameter 'mediaid' is set
    if (mediaid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'mediaid' when calling v1AccountAccountidMediaMediaidGet",
        new ApiException(400, "Missing the required parameter 'mediaid' when calling v1AccountAccountidMediaMediaidGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountid}/media/{mediaid}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountid" + "\\}", apiInvoker.escapeString(accountid.toString())).replaceAll("\\{" + "mediaid" + "\\}", apiInvoker.escapeString(mediaid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsMediaGetSingle) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsMediaGetSingle.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create Media
  * Generate a media object to allow users to upload a media file in an account.
   * @param accountid Account ID, 32 alpha numeric
   * @param media Media creation or update payload
   * @return ServiceDocsMediaGetSingle
  */
  public ServiceDocsMediaGetSingle v1AccountAccountidMediaPost (String accountid, ServiceVOIPMediaAddEditData media) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = media;
    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountid' when calling v1AccountAccountidMediaPost",
        new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidMediaPost"));
    }
    // verify the required parameter 'media' is set
    if (media == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'media' when calling v1AccountAccountidMediaPost",
        new ApiException(400, "Missing the required parameter 'media' when calling v1AccountAccountidMediaPost"));
    }

    // create path and map variables
    String path = "/v1/account/{accountid}/media".replaceAll("\\{" + "accountid" + "\\}", apiInvoker.escapeString(accountid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsMediaGetSingle) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsMediaGetSingle.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create Media
   * Generate a media object to allow users to upload a media file in an account.
   * @param accountid Account ID, 32 alpha numeric   * @param media Media creation or update payload
  */
  public void v1AccountAccountidMediaPost (String accountid, ServiceVOIPMediaAddEditData media, final Response.Listener<ServiceDocsMediaGetSingle> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = media;

    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountid' when calling v1AccountAccountidMediaPost",
        new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidMediaPost"));
    }
    // verify the required parameter 'media' is set
    if (media == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'media' when calling v1AccountAccountidMediaPost",
        new ApiException(400, "Missing the required parameter 'media' when calling v1AccountAccountidMediaPost"));
    }

    // create path and map variables
    String path = "/v1/account/{accountid}/media".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountid" + "\\}", apiInvoker.escapeString(accountid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsMediaGetSingle) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsMediaGetSingle.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
