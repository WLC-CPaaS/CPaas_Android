/**
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.CPAASError;
import org.openapitools.client.model.ServiceAdminUserAddData;
import org.openapitools.client.model.ServiceAdminUserEditData;
import org.openapitools.client.model.ServiceDocsAdminUserDelete;
import org.openapitools.client.model.ServiceDocsAdminUserGetAll;
import org.openapitools.client.model.ServiceDocsAdminUserGetSingle;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class CPaaSManagementApi {
  String basePath = "http://API_HOSTNAME";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Get All CPaaS Users
  * Retrieve a list of all CPaaS users in an account.
   * @param pageSize number of records to return, range 1 to 100
   * @param startKey unique to fetch next records
   * @param sort sorting the records by email(default)/role/first_name/last_name, _A is for ascending and _D is for descending, eg: sort&#x3D;role_A,email_D
   * @param email Email
   * @param role User Role
   * @param firstName First Name
   * @param lastName Last Name
   * @return ServiceDocsAdminUserGetAll
  */
  public ServiceDocsAdminUserGetAll v1MgmtUserGet (Integer pageSize, String startKey, String sort, String email, String role, String firstName, String lastName) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/v1/mgmt/user";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_key", startKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sort", sort));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "email", email));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "role", role));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "first_name", firstName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "last_name", lastName));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsAdminUserGetAll) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsAdminUserGetAll.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get All CPaaS Users
   * Retrieve a list of all CPaaS users in an account.
   * @param pageSize number of records to return, range 1 to 100   * @param startKey unique to fetch next records   * @param sort sorting the records by email(default)/role/first_name/last_name, _A is for ascending and _D is for descending, eg: sort&#x3D;role_A,email_D   * @param email Email   * @param role User Role   * @param firstName First Name   * @param lastName Last Name
  */
  public void v1MgmtUserGet (Integer pageSize, String startKey, String sort, String email, String role, String firstName, String lastName, final Response.Listener<ServiceDocsAdminUserGetAll> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/v1/mgmt/user".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_key", startKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sort", sort));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "email", email));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "role", role));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "first_name", firstName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "last_name", lastName));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsAdminUserGetAll) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsAdminUserGetAll.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Invite CPaaS User
  * Link a new CPaaS user to an existing client account.
   * @param reqBody payload fields
   * @return ServiceDocsAdminUserGetSingle
  */
  public ServiceDocsAdminUserGetSingle v1MgmtUserPost (ServiceAdminUserAddData reqBody) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = reqBody;
    // verify the required parameter 'reqBody' is set
    if (reqBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'reqBody' when calling v1MgmtUserPost",
        new ApiException(400, "Missing the required parameter 'reqBody' when calling v1MgmtUserPost"));
    }

    // create path and map variables
    String path = "/v1/mgmt/user";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsAdminUserGetSingle) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsAdminUserGetSingle.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Invite CPaaS User
   * Link a new CPaaS user to an existing client account.
   * @param reqBody payload fields
  */
  public void v1MgmtUserPost (ServiceAdminUserAddData reqBody, final Response.Listener<ServiceDocsAdminUserGetSingle> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = reqBody;

    // verify the required parameter 'reqBody' is set
    if (reqBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'reqBody' when calling v1MgmtUserPost",
        new ApiException(400, "Missing the required parameter 'reqBody' when calling v1MgmtUserPost"));
    }

    // create path and map variables
    String path = "/v1/mgmt/user".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsAdminUserGetSingle) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsAdminUserGetSingle.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete CPaaS User
  * Delete a CPaaS user from the associated account.
   * @param userID User ID, numeric
   * @return ServiceDocsAdminUserDelete
  */
  public ServiceDocsAdminUserDelete v1MgmtUserUserIDDelete (String userID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'userID' is set
    if (userID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userID' when calling v1MgmtUserUserIDDelete",
        new ApiException(400, "Missing the required parameter 'userID' when calling v1MgmtUserUserIDDelete"));
    }

    // create path and map variables
    String path = "/v1/mgmt/user/{userID}".replaceAll("\\{" + "userID" + "\\}", apiInvoker.escapeString(userID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsAdminUserDelete) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsAdminUserDelete.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete CPaaS User
   * Delete a CPaaS user from the associated account.
   * @param userID User ID, numeric
  */
  public void v1MgmtUserUserIDDelete (String userID, final Response.Listener<ServiceDocsAdminUserDelete> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'userID' is set
    if (userID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userID' when calling v1MgmtUserUserIDDelete",
        new ApiException(400, "Missing the required parameter 'userID' when calling v1MgmtUserUserIDDelete"));
    }

    // create path and map variables
    String path = "/v1/mgmt/user/{userID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "userID" + "\\}", apiInvoker.escapeString(userID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsAdminUserDelete) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsAdminUserDelete.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get CPaaS User Details
  * View details about each CPaaS user in an account.
   * @param userID User ID, numeric
   * @return ServiceDocsAdminUserGetSingle
  */
  public ServiceDocsAdminUserGetSingle v1MgmtUserUserIDGet (String userID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'userID' is set
    if (userID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userID' when calling v1MgmtUserUserIDGet",
        new ApiException(400, "Missing the required parameter 'userID' when calling v1MgmtUserUserIDGet"));
    }

    // create path and map variables
    String path = "/v1/mgmt/user/{userID}".replaceAll("\\{" + "userID" + "\\}", apiInvoker.escapeString(userID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsAdminUserGetSingle) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsAdminUserGetSingle.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get CPaaS User Details
   * View details about each CPaaS user in an account.
   * @param userID User ID, numeric
  */
  public void v1MgmtUserUserIDGet (String userID, final Response.Listener<ServiceDocsAdminUserGetSingle> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'userID' is set
    if (userID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userID' when calling v1MgmtUserUserIDGet",
        new ApiException(400, "Missing the required parameter 'userID' when calling v1MgmtUserUserIDGet"));
    }

    // create path and map variables
    String path = "/v1/mgmt/user/{userID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "userID" + "\\}", apiInvoker.escapeString(userID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsAdminUserGetSingle) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsAdminUserGetSingle.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update CPaaS User Role
  * Update a CPaaS user&#39;s role within a client&#39;s account.
   * @param userID User ID, numeric
   * @param reqBody payload fields
   * @return ServiceDocsAdminUserGetSingle
  */
  public ServiceDocsAdminUserGetSingle v1MgmtUserUserIDPut (String userID, ServiceAdminUserEditData reqBody) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = reqBody;
    // verify the required parameter 'userID' is set
    if (userID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userID' when calling v1MgmtUserUserIDPut",
        new ApiException(400, "Missing the required parameter 'userID' when calling v1MgmtUserUserIDPut"));
    }
    // verify the required parameter 'reqBody' is set
    if (reqBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'reqBody' when calling v1MgmtUserUserIDPut",
        new ApiException(400, "Missing the required parameter 'reqBody' when calling v1MgmtUserUserIDPut"));
    }

    // create path and map variables
    String path = "/v1/mgmt/user/{userID}".replaceAll("\\{" + "userID" + "\\}", apiInvoker.escapeString(userID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsAdminUserGetSingle) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsAdminUserGetSingle.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update CPaaS User Role
   * Update a CPaaS user&#39;s role within a client&#39;s account.
   * @param userID User ID, numeric   * @param reqBody payload fields
  */
  public void v1MgmtUserUserIDPut (String userID, ServiceAdminUserEditData reqBody, final Response.Listener<ServiceDocsAdminUserGetSingle> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = reqBody;

    // verify the required parameter 'userID' is set
    if (userID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userID' when calling v1MgmtUserUserIDPut",
        new ApiException(400, "Missing the required parameter 'userID' when calling v1MgmtUserUserIDPut"));
    }
    // verify the required parameter 'reqBody' is set
    if (reqBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'reqBody' when calling v1MgmtUserUserIDPut",
        new ApiException(400, "Missing the required parameter 'reqBody' when calling v1MgmtUserUserIDPut"));
    }

    // create path and map variables
    String path = "/v1/mgmt/user/{userID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "userID" + "\\}", apiInvoker.escapeString(userID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsAdminUserGetSingle) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsAdminUserGetSingle.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
