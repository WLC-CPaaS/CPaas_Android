/**
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.CPAASError;
import org.openapitools.client.model.MenuInputData;
import org.openapitools.client.model.MenuOutputDetail;
import org.openapitools.client.model.MenuOutputList;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class MenuApi {
  String basePath = "http://api.beta.cpaaslabs.net";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Get Menu List
  * Users can access data about all menus in an account.
   * @param accountID Account ID, 32 alpha numeric
   * @param startKey start_key for pagination that was returned as next_start_key from your previous call
   * @param pageSize number of records to return, range 1 to 50
   * @return MenuOutputList
  */
  public MenuOutputList v1AccountAccountIDMenuGet (String accountID, String startKey, Integer pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDMenuGet",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDMenuGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/menu".replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_key", startKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (MenuOutputList) ApiInvoker.deserialize(localVarResponse, "", MenuOutputList.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Menu List
   * Users can access data about all menus in an account.
   * @param accountID Account ID, 32 alpha numeric   * @param startKey start_key for pagination that was returned as next_start_key from your previous call   * @param pageSize number of records to return, range 1 to 50
  */
  public void v1AccountAccountIDMenuGet (String accountID, String startKey, Integer pageSize, final Response.Listener<MenuOutputList> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDMenuGet",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDMenuGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/menu".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_key", startKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((MenuOutputList) ApiInvoker.deserialize(localVarResponse,  "", MenuOutputList.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete Menu
  * Delete a menu from an account.
   * @param accountID Account ID, 32 alpha numeric
   * @param menuID Menu ID, 32 alpha numeric
   * @return MenuOutputDetail
  */
  public MenuOutputDetail v1AccountAccountIDMenuMenuIDDelete (String accountID, String menuID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDMenuMenuIDDelete",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDMenuMenuIDDelete"));
    }
    // verify the required parameter 'menuID' is set
    if (menuID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'menuID' when calling v1AccountAccountIDMenuMenuIDDelete",
        new ApiException(400, "Missing the required parameter 'menuID' when calling v1AccountAccountIDMenuMenuIDDelete"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/menu/{menuID}".replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "menuID" + "\\}", apiInvoker.escapeString(menuID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (MenuOutputDetail) ApiInvoker.deserialize(localVarResponse, "", MenuOutputDetail.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete Menu
   * Delete a menu from an account.
   * @param accountID Account ID, 32 alpha numeric   * @param menuID Menu ID, 32 alpha numeric
  */
  public void v1AccountAccountIDMenuMenuIDDelete (String accountID, String menuID, final Response.Listener<MenuOutputDetail> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDMenuMenuIDDelete",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDMenuMenuIDDelete"));
    }
    // verify the required parameter 'menuID' is set
    if (menuID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'menuID' when calling v1AccountAccountIDMenuMenuIDDelete",
        new ApiException(400, "Missing the required parameter 'menuID' when calling v1AccountAccountIDMenuMenuIDDelete"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/menu/{menuID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "menuID" + "\\}", apiInvoker.escapeString(menuID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((MenuOutputDetail) ApiInvoker.deserialize(localVarResponse,  "", MenuOutputDetail.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Menu Details
  * Get details about a menu in an account.
   * @param accountID Account ID, 32 alpha numeric
   * @param menuID Menu ID, 32 alpha numeric
   * @return MenuOutputDetail
  */
  public MenuOutputDetail v1AccountAccountIDMenuMenuIDGet (String accountID, String menuID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDMenuMenuIDGet",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDMenuMenuIDGet"));
    }
    // verify the required parameter 'menuID' is set
    if (menuID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'menuID' when calling v1AccountAccountIDMenuMenuIDGet",
        new ApiException(400, "Missing the required parameter 'menuID' when calling v1AccountAccountIDMenuMenuIDGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/menu/{menuID}".replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "menuID" + "\\}", apiInvoker.escapeString(menuID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (MenuOutputDetail) ApiInvoker.deserialize(localVarResponse, "", MenuOutputDetail.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Menu Details
   * Get details about a menu in an account.
   * @param accountID Account ID, 32 alpha numeric   * @param menuID Menu ID, 32 alpha numeric
  */
  public void v1AccountAccountIDMenuMenuIDGet (String accountID, String menuID, final Response.Listener<MenuOutputDetail> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDMenuMenuIDGet",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDMenuMenuIDGet"));
    }
    // verify the required parameter 'menuID' is set
    if (menuID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'menuID' when calling v1AccountAccountIDMenuMenuIDGet",
        new ApiException(400, "Missing the required parameter 'menuID' when calling v1AccountAccountIDMenuMenuIDGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/menu/{menuID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "menuID" + "\\}", apiInvoker.escapeString(menuID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((MenuOutputDetail) ApiInvoker.deserialize(localVarResponse,  "", MenuOutputDetail.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update Menu
  * Edit an account menu.
   * @param accountID Account ID, 32 alpha numeric
   * @param menuID Menu ID, 32 alpha numeric
   * @param reqBody payload fields
   * @return MenuOutputDetail
  */
  public MenuOutputDetail v1AccountAccountIDMenuMenuIDPut (String accountID, String menuID, MenuInputData reqBody) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = reqBody;
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDMenuMenuIDPut",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDMenuMenuIDPut"));
    }
    // verify the required parameter 'menuID' is set
    if (menuID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'menuID' when calling v1AccountAccountIDMenuMenuIDPut",
        new ApiException(400, "Missing the required parameter 'menuID' when calling v1AccountAccountIDMenuMenuIDPut"));
    }
    // verify the required parameter 'reqBody' is set
    if (reqBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'reqBody' when calling v1AccountAccountIDMenuMenuIDPut",
        new ApiException(400, "Missing the required parameter 'reqBody' when calling v1AccountAccountIDMenuMenuIDPut"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/menu/{menuID}".replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "menuID" + "\\}", apiInvoker.escapeString(menuID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (MenuOutputDetail) ApiInvoker.deserialize(localVarResponse, "", MenuOutputDetail.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update Menu
   * Edit an account menu.
   * @param accountID Account ID, 32 alpha numeric   * @param menuID Menu ID, 32 alpha numeric   * @param reqBody payload fields
  */
  public void v1AccountAccountIDMenuMenuIDPut (String accountID, String menuID, MenuInputData reqBody, final Response.Listener<MenuOutputDetail> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = reqBody;

    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDMenuMenuIDPut",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDMenuMenuIDPut"));
    }
    // verify the required parameter 'menuID' is set
    if (menuID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'menuID' when calling v1AccountAccountIDMenuMenuIDPut",
        new ApiException(400, "Missing the required parameter 'menuID' when calling v1AccountAccountIDMenuMenuIDPut"));
    }
    // verify the required parameter 'reqBody' is set
    if (reqBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'reqBody' when calling v1AccountAccountIDMenuMenuIDPut",
        new ApiException(400, "Missing the required parameter 'reqBody' when calling v1AccountAccountIDMenuMenuIDPut"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/menu/{menuID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString())).replaceAll("\\{" + "menuID" + "\\}", apiInvoker.escapeString(menuID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((MenuOutputDetail) ApiInvoker.deserialize(localVarResponse,  "", MenuOutputDetail.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create Menu
  * Create a new menu for an account.
   * @param accountID Account ID, 32 alphanumeric
   * @param menu Menu data
   * @return MenuOutputDetail
  */
  public MenuOutputDetail v1AccountAccountIDMenuPost (String accountID, MenuInputData menu) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = menu;
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDMenuPost",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDMenuPost"));
    }
    // verify the required parameter 'menu' is set
    if (menu == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'menu' when calling v1AccountAccountIDMenuPost",
        new ApiException(400, "Missing the required parameter 'menu' when calling v1AccountAccountIDMenuPost"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/menu".replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (MenuOutputDetail) ApiInvoker.deserialize(localVarResponse, "", MenuOutputDetail.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create Menu
   * Create a new menu for an account.
   * @param accountID Account ID, 32 alphanumeric   * @param menu Menu data
  */
  public void v1AccountAccountIDMenuPost (String accountID, MenuInputData menu, final Response.Listener<MenuOutputDetail> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = menu;

    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountID' when calling v1AccountAccountIDMenuPost",
        new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDMenuPost"));
    }
    // verify the required parameter 'menu' is set
    if (menu == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'menu' when calling v1AccountAccountIDMenuPost",
        new ApiException(400, "Missing the required parameter 'menu' when calling v1AccountAccountIDMenuPost"));
    }

    // create path and map variables
    String path = "/v1/account/{accountID}/menu".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountID" + "\\}", apiInvoker.escapeString(accountID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((MenuOutputDetail) ApiInvoker.deserialize(localVarResponse,  "", MenuOutputDetail.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
