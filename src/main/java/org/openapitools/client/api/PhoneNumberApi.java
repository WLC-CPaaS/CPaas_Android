/**
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.CPAASError;
import java.util.*;
import org.openapitools.client.model.ServiceAPIResponseStatusCodeOnly;
import org.openapitools.client.model.ServiceDocsAccountPhonenumberGetAll;
import org.openapitools.client.model.ServiceDocsOrderPhonenumber;
import org.openapitools.client.model.ServiceDocsPhonenumberAssignPayload;
import org.openapitools.client.model.ServiceDocsPhonenumberSearchGetAll;
import org.openapitools.client.model.ServiceDocsPhonenumberUnassignPayload;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class PhoneNumberApi {
  String basePath = "http://api.beta.cpaaslabs.net";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Get Assigned Numbers List
  * Access all phone numbers assigned to a CPaaS account.
   * @param accountid Account ID, 32 alpha numeric
   * @param startKey Start key for pagination, obtained from previous responses
   * @param pageSize Number of records to return per page (range: 1 to 50)
   * @return ServiceDocsAccountPhonenumberGetAll
  */
  public ServiceDocsAccountPhonenumberGetAll v1AccountAccountidPhonenumberGet (String accountid, String startKey, Integer pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountid' when calling v1AccountAccountidPhonenumberGet",
        new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidPhonenumberGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountid}/phonenumber".replaceAll("\\{" + "accountid" + "\\}", apiInvoker.escapeString(accountid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_key", startKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsAccountPhonenumberGetAll) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsAccountPhonenumberGetAll.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Assigned Numbers List
   * Access all phone numbers assigned to a CPaaS account.
   * @param accountid Account ID, 32 alpha numeric   * @param startKey Start key for pagination, obtained from previous responses   * @param pageSize Number of records to return per page (range: 1 to 50)
  */
  public void v1AccountAccountidPhonenumberGet (String accountid, String startKey, Integer pageSize, final Response.Listener<ServiceDocsAccountPhonenumberGetAll> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountid' when calling v1AccountAccountidPhonenumberGet",
        new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidPhonenumberGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountid}/phonenumber".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountid" + "\\}", apiInvoker.escapeString(accountid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_key", startKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsAccountPhonenumberGetAll) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsAccountPhonenumberGetAll.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Assign Number
  * Assign a purchased phone number to an account.
   * @param payload assignment payload
   * @return ServiceAPIResponseStatusCodeOnly
  */
  public ServiceAPIResponseStatusCodeOnly v1AccountPhonenumberAssignPost (ServiceDocsPhonenumberAssignPayload payload) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = payload;
    // verify the required parameter 'payload' is set
    if (payload == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'payload' when calling v1AccountPhonenumberAssignPost",
        new ApiException(400, "Missing the required parameter 'payload' when calling v1AccountPhonenumberAssignPost"));
    }

    // create path and map variables
    String path = "/v1/account/phonenumber/assign";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceAPIResponseStatusCodeOnly) ApiInvoker.deserialize(localVarResponse, "", ServiceAPIResponseStatusCodeOnly.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Assign Number
   * Assign a purchased phone number to an account.
   * @param payload assignment payload
  */
  public void v1AccountPhonenumberAssignPost (ServiceDocsPhonenumberAssignPayload payload, final Response.Listener<ServiceAPIResponseStatusCodeOnly> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = payload;

    // verify the required parameter 'payload' is set
    if (payload == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'payload' when calling v1AccountPhonenumberAssignPost",
        new ApiException(400, "Missing the required parameter 'payload' when calling v1AccountPhonenumberAssignPost"));
    }

    // create path and map variables
    String path = "/v1/account/phonenumber/assign".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceAPIResponseStatusCodeOnly) ApiInvoker.deserialize(localVarResponse,  "", ServiceAPIResponseStatusCodeOnly.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Disconnect Number
  * Disconnecting a phone number from a CPaaS account relinquishes ownership of the number back to the carrier.
   * @param payload disconnect payload
   * @return ServiceAPIResponseStatusCodeOnly
  */
  public ServiceAPIResponseStatusCodeOnly v1AccountPhonenumberDisconnectPost (ServiceDocsPhonenumberUnassignPayload payload) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = payload;
    // verify the required parameter 'payload' is set
    if (payload == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'payload' when calling v1AccountPhonenumberDisconnectPost",
        new ApiException(400, "Missing the required parameter 'payload' when calling v1AccountPhonenumberDisconnectPost"));
    }

    // create path and map variables
    String path = "/v1/account/phonenumber/disconnect";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceAPIResponseStatusCodeOnly) ApiInvoker.deserialize(localVarResponse, "", ServiceAPIResponseStatusCodeOnly.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Disconnect Number
   * Disconnecting a phone number from a CPaaS account relinquishes ownership of the number back to the carrier.
   * @param payload disconnect payload
  */
  public void v1AccountPhonenumberDisconnectPost (ServiceDocsPhonenumberUnassignPayload payload, final Response.Listener<ServiceAPIResponseStatusCodeOnly> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = payload;

    // verify the required parameter 'payload' is set
    if (payload == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'payload' when calling v1AccountPhonenumberDisconnectPost",
        new ApiException(400, "Missing the required parameter 'payload' when calling v1AccountPhonenumberDisconnectPost"));
    }

    // create path and map variables
    String path = "/v1/account/phonenumber/disconnect".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceAPIResponseStatusCodeOnly) ApiInvoker.deserialize(localVarResponse,  "", ServiceAPIResponseStatusCodeOnly.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Unassigned Numbers List
  * Obtain all phone numbers that have not been assigned to a CPaaS account within your organization.
   * @param startKey Start key for pagination, obtained from previous responses
   * @param pageSize Number of records to return per page (range: 1 to 50)
   * @return ServiceDocsAccountPhonenumberGetAll
  */
  public ServiceDocsAccountPhonenumberGetAll v1AccountPhonenumberGet (String startKey, Integer pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/v1/account/phonenumber";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_key", startKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsAccountPhonenumberGetAll) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsAccountPhonenumberGetAll.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Unassigned Numbers List
   * Obtain all phone numbers that have not been assigned to a CPaaS account within your organization.
   * @param startKey Start key for pagination, obtained from previous responses   * @param pageSize Number of records to return per page (range: 1 to 50)
  */
  public void v1AccountPhonenumberGet (String startKey, Integer pageSize, final Response.Listener<ServiceDocsAccountPhonenumberGetAll> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/v1/account/phonenumber".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_key", startKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsAccountPhonenumberGetAll) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsAccountPhonenumberGetAll.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Purchase Number
  * Purchase or activate a phone number for CPaaS accounts within your business.
   * @param phonenumber phonenumber fields
   * @return ServiceDocsOrderPhonenumber
  */
  public ServiceDocsOrderPhonenumber v1AccountPhonenumberPost (List<String> phonenumber) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = phonenumber;
    // verify the required parameter 'phonenumber' is set
    if (phonenumber == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'phonenumber' when calling v1AccountPhonenumberPost",
        new ApiException(400, "Missing the required parameter 'phonenumber' when calling v1AccountPhonenumberPost"));
    }

    // create path and map variables
    String path = "/v1/account/phonenumber";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsOrderPhonenumber) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsOrderPhonenumber.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Purchase Number
   * Purchase or activate a phone number for CPaaS accounts within your business.
   * @param phonenumber phonenumber fields
  */
  public void v1AccountPhonenumberPost (List<String> phonenumber, final Response.Listener<ServiceDocsOrderPhonenumber> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = phonenumber;

    // verify the required parameter 'phonenumber' is set
    if (phonenumber == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'phonenumber' when calling v1AccountPhonenumberPost",
        new ApiException(400, "Missing the required parameter 'phonenumber' when calling v1AccountPhonenumberPost"));
    }

    // create path and map variables
    String path = "/v1/account/phonenumber".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsOrderPhonenumber) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsOrderPhonenumber.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Unassign Number
  * Remove a phone number from an account and place it back on the list of unassigned phone numbers.
   * @param payload unassign payload
   * @return ServiceAPIResponseStatusCodeOnly
  */
  public ServiceAPIResponseStatusCodeOnly v1AccountPhonenumberUnassignPost (ServiceDocsPhonenumberUnassignPayload payload) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = payload;
    // verify the required parameter 'payload' is set
    if (payload == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'payload' when calling v1AccountPhonenumberUnassignPost",
        new ApiException(400, "Missing the required parameter 'payload' when calling v1AccountPhonenumberUnassignPost"));
    }

    // create path and map variables
    String path = "/v1/account/phonenumber/unassign";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceAPIResponseStatusCodeOnly) ApiInvoker.deserialize(localVarResponse, "", ServiceAPIResponseStatusCodeOnly.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Unassign Number
   * Remove a phone number from an account and place it back on the list of unassigned phone numbers.
   * @param payload unassign payload
  */
  public void v1AccountPhonenumberUnassignPost (ServiceDocsPhonenumberUnassignPayload payload, final Response.Listener<ServiceAPIResponseStatusCodeOnly> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = payload;

    // verify the required parameter 'payload' is set
    if (payload == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'payload' when calling v1AccountPhonenumberUnassignPost",
        new ApiException(400, "Missing the required parameter 'payload' when calling v1AccountPhonenumberUnassignPost"));
    }

    // create path and map variables
    String path = "/v1/account/phonenumber/unassign".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceAPIResponseStatusCodeOnly) ApiInvoker.deserialize(localVarResponse,  "", ServiceAPIResponseStatusCodeOnly.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Search New Numbers
  * Conduct a search for available phone numbers for purchase within an area code.
   * @param areaCode Area code (exactly 3 numeric characters) example: 610 or 484
   * @param quantity Number of records to return (range: 1 to 100, defaults to 100 if not provided)
   * @return ServiceDocsPhonenumberSearchGetAll
  */
  public ServiceDocsPhonenumberSearchGetAll v1PhonenumberSearchGet (String areaCode, Integer quantity) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'areaCode' is set
    if (areaCode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'areaCode' when calling v1PhonenumberSearchGet",
        new ApiException(400, "Missing the required parameter 'areaCode' when calling v1PhonenumberSearchGet"));
    }

    // create path and map variables
    String path = "/v1/phonenumber/search";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "area_code", areaCode));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "quantity", quantity));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsPhonenumberSearchGetAll) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsPhonenumberSearchGetAll.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Search New Numbers
   * Conduct a search for available phone numbers for purchase within an area code.
   * @param areaCode Area code (exactly 3 numeric characters) example: 610 or 484   * @param quantity Number of records to return (range: 1 to 100, defaults to 100 if not provided)
  */
  public void v1PhonenumberSearchGet (String areaCode, Integer quantity, final Response.Listener<ServiceDocsPhonenumberSearchGetAll> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'areaCode' is set
    if (areaCode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'areaCode' when calling v1PhonenumberSearchGet",
        new ApiException(400, "Missing the required parameter 'areaCode' when calling v1PhonenumberSearchGet"));
    }

    // create path and map variables
    String path = "/v1/phonenumber/search".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "area_code", areaCode));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "quantity", quantity));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsPhonenumberSearchGetAll) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsPhonenumberSearchGetAll.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
