/**
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.CPAASError;
import org.openapitools.client.model.ServiceDocsDeviceGetAll;
import org.openapitools.client.model.ServiceDocsDeviceGetSingle;
import org.openapitools.client.model.ServiceDocsDeviceReboot;
import org.openapitools.client.model.ServiceDocsDeviceStatus;
import org.openapitools.client.model.ServiceVOIPDeviceAddEdit2;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class DeviceApi {
  String basePath = "http://api.beta.cpaaslabs.net";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Delete Device
  * Remove one device from a CPaaS account.
   * @param accountid Account ID, 32 alpha numeric
   * @param deviceid Device ID, 32 alpha numeric
   * @return ServiceDocsDeviceGetSingle
  */
  public ServiceDocsDeviceGetSingle v1AccountAccountidDeviceDeviceidDelete (String accountid, String deviceid) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountid' when calling v1AccountAccountidDeviceDeviceidDelete",
        new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidDeviceDeviceidDelete"));
    }
    // verify the required parameter 'deviceid' is set
    if (deviceid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deviceid' when calling v1AccountAccountidDeviceDeviceidDelete",
        new ApiException(400, "Missing the required parameter 'deviceid' when calling v1AccountAccountidDeviceDeviceidDelete"));
    }

    // create path and map variables
    String path = "/v1/account/{accountid}/device/{deviceid}".replaceAll("\\{" + "accountid" + "\\}", apiInvoker.escapeString(accountid.toString())).replaceAll("\\{" + "deviceid" + "\\}", apiInvoker.escapeString(deviceid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsDeviceGetSingle) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsDeviceGetSingle.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete Device
   * Remove one device from a CPaaS account.
   * @param accountid Account ID, 32 alpha numeric   * @param deviceid Device ID, 32 alpha numeric
  */
  public void v1AccountAccountidDeviceDeviceidDelete (String accountid, String deviceid, final Response.Listener<ServiceDocsDeviceGetSingle> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountid' when calling v1AccountAccountidDeviceDeviceidDelete",
        new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidDeviceDeviceidDelete"));
    }
    // verify the required parameter 'deviceid' is set
    if (deviceid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deviceid' when calling v1AccountAccountidDeviceDeviceidDelete",
        new ApiException(400, "Missing the required parameter 'deviceid' when calling v1AccountAccountidDeviceDeviceidDelete"));
    }

    // create path and map variables
    String path = "/v1/account/{accountid}/device/{deviceid}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountid" + "\\}", apiInvoker.escapeString(accountid.toString())).replaceAll("\\{" + "deviceid" + "\\}", apiInvoker.escapeString(deviceid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsDeviceGetSingle) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsDeviceGetSingle.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Device Details
  * Permit a user to view specific device details.
   * @param accountid Account ID, 32 alpha numeric
   * @param deviceid Device ID, 32 alpha numeric
   * @return ServiceDocsDeviceGetSingle
  */
  public ServiceDocsDeviceGetSingle v1AccountAccountidDeviceDeviceidGet (String accountid, String deviceid) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountid' when calling v1AccountAccountidDeviceDeviceidGet",
        new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidDeviceDeviceidGet"));
    }
    // verify the required parameter 'deviceid' is set
    if (deviceid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deviceid' when calling v1AccountAccountidDeviceDeviceidGet",
        new ApiException(400, "Missing the required parameter 'deviceid' when calling v1AccountAccountidDeviceDeviceidGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountid}/device/{deviceid}".replaceAll("\\{" + "accountid" + "\\}", apiInvoker.escapeString(accountid.toString())).replaceAll("\\{" + "deviceid" + "\\}", apiInvoker.escapeString(deviceid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsDeviceGetSingle) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsDeviceGetSingle.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Device Details
   * Permit a user to view specific device details.
   * @param accountid Account ID, 32 alpha numeric   * @param deviceid Device ID, 32 alpha numeric
  */
  public void v1AccountAccountidDeviceDeviceidGet (String accountid, String deviceid, final Response.Listener<ServiceDocsDeviceGetSingle> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountid' when calling v1AccountAccountidDeviceDeviceidGet",
        new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidDeviceDeviceidGet"));
    }
    // verify the required parameter 'deviceid' is set
    if (deviceid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deviceid' when calling v1AccountAccountidDeviceDeviceidGet",
        new ApiException(400, "Missing the required parameter 'deviceid' when calling v1AccountAccountidDeviceDeviceidGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountid}/device/{deviceid}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountid" + "\\}", apiInvoker.escapeString(accountid.toString())).replaceAll("\\{" + "deviceid" + "\\}", apiInvoker.escapeString(deviceid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsDeviceGetSingle) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsDeviceGetSingle.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update Device
  * Edit specifics about the device, such as the device type, name, and owner.
   * @param accountid Account ID, 32 alpha numeric
   * @param deviceid Device ID, 32 alpha numeric
   * @param device device fields
   * @return ServiceDocsDeviceGetSingle
  */
  public ServiceDocsDeviceGetSingle v1AccountAccountidDeviceDeviceidPut (String accountid, String deviceid, ServiceVOIPDeviceAddEdit2 device) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = device;
    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountid' when calling v1AccountAccountidDeviceDeviceidPut",
        new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidDeviceDeviceidPut"));
    }
    // verify the required parameter 'deviceid' is set
    if (deviceid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deviceid' when calling v1AccountAccountidDeviceDeviceidPut",
        new ApiException(400, "Missing the required parameter 'deviceid' when calling v1AccountAccountidDeviceDeviceidPut"));
    }
    // verify the required parameter 'device' is set
    if (device == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'device' when calling v1AccountAccountidDeviceDeviceidPut",
        new ApiException(400, "Missing the required parameter 'device' when calling v1AccountAccountidDeviceDeviceidPut"));
    }

    // create path and map variables
    String path = "/v1/account/{accountid}/device/{deviceid}".replaceAll("\\{" + "accountid" + "\\}", apiInvoker.escapeString(accountid.toString())).replaceAll("\\{" + "deviceid" + "\\}", apiInvoker.escapeString(deviceid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsDeviceGetSingle) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsDeviceGetSingle.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update Device
   * Edit specifics about the device, such as the device type, name, and owner.
   * @param accountid Account ID, 32 alpha numeric   * @param deviceid Device ID, 32 alpha numeric   * @param device device fields
  */
  public void v1AccountAccountidDeviceDeviceidPut (String accountid, String deviceid, ServiceVOIPDeviceAddEdit2 device, final Response.Listener<ServiceDocsDeviceGetSingle> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = device;

    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountid' when calling v1AccountAccountidDeviceDeviceidPut",
        new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidDeviceDeviceidPut"));
    }
    // verify the required parameter 'deviceid' is set
    if (deviceid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deviceid' when calling v1AccountAccountidDeviceDeviceidPut",
        new ApiException(400, "Missing the required parameter 'deviceid' when calling v1AccountAccountidDeviceDeviceidPut"));
    }
    // verify the required parameter 'device' is set
    if (device == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'device' when calling v1AccountAccountidDeviceDeviceidPut",
        new ApiException(400, "Missing the required parameter 'device' when calling v1AccountAccountidDeviceDeviceidPut"));
    }

    // create path and map variables
    String path = "/v1/account/{accountid}/device/{deviceid}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountid" + "\\}", apiInvoker.escapeString(accountid.toString())).replaceAll("\\{" + "deviceid" + "\\}", apiInvoker.escapeString(deviceid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsDeviceGetSingle) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsDeviceGetSingle.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Reboot Device
  * Reboot a device in an account to mitigate malware and improve device performance.
   * @param accountid Account ID, 32 alpha numeric
   * @param deviceid Device ID, 32 alpha numeric
   * @return ServiceDocsDeviceReboot
  */
  public ServiceDocsDeviceReboot v1AccountAccountidDeviceDeviceidRebootPost (String accountid, String deviceid) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountid' when calling v1AccountAccountidDeviceDeviceidRebootPost",
        new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidDeviceDeviceidRebootPost"));
    }
    // verify the required parameter 'deviceid' is set
    if (deviceid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deviceid' when calling v1AccountAccountidDeviceDeviceidRebootPost",
        new ApiException(400, "Missing the required parameter 'deviceid' when calling v1AccountAccountidDeviceDeviceidRebootPost"));
    }

    // create path and map variables
    String path = "/v1/account/{accountid}/device/{deviceid}/reboot".replaceAll("\\{" + "accountid" + "\\}", apiInvoker.escapeString(accountid.toString())).replaceAll("\\{" + "deviceid" + "\\}", apiInvoker.escapeString(deviceid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsDeviceReboot) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsDeviceReboot.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Reboot Device
   * Reboot a device in an account to mitigate malware and improve device performance.
   * @param accountid Account ID, 32 alpha numeric   * @param deviceid Device ID, 32 alpha numeric
  */
  public void v1AccountAccountidDeviceDeviceidRebootPost (String accountid, String deviceid, final Response.Listener<ServiceDocsDeviceReboot> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountid' when calling v1AccountAccountidDeviceDeviceidRebootPost",
        new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidDeviceDeviceidRebootPost"));
    }
    // verify the required parameter 'deviceid' is set
    if (deviceid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deviceid' when calling v1AccountAccountidDeviceDeviceidRebootPost",
        new ApiException(400, "Missing the required parameter 'deviceid' when calling v1AccountAccountidDeviceDeviceidRebootPost"));
    }

    // create path and map variables
    String path = "/v1/account/{accountid}/device/{deviceid}/reboot".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountid" + "\\}", apiInvoker.escapeString(accountid.toString())).replaceAll("\\{" + "deviceid" + "\\}", apiInvoker.escapeString(deviceid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsDeviceReboot) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsDeviceReboot.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Device List
  * Obtain a list of all devices associated with an account such as fax machines, cell phones, and soft phones.
   * @param accountid Account ID, 32 alpha numeric
   * @param startKey start_key for pagination that was returned as next_start_key from your previous call
   * @param pageSize number of records to return, range 1 to 50
   * @return ServiceDocsDeviceGetAll
  */
  public ServiceDocsDeviceGetAll v1AccountAccountidDeviceGet (String accountid, String startKey, Integer pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountid' when calling v1AccountAccountidDeviceGet",
        new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidDeviceGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountid}/device".replaceAll("\\{" + "accountid" + "\\}", apiInvoker.escapeString(accountid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_key", startKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsDeviceGetAll) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsDeviceGetAll.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Device List
   * Obtain a list of all devices associated with an account such as fax machines, cell phones, and soft phones.
   * @param accountid Account ID, 32 alpha numeric   * @param startKey start_key for pagination that was returned as next_start_key from your previous call   * @param pageSize number of records to return, range 1 to 50
  */
  public void v1AccountAccountidDeviceGet (String accountid, String startKey, Integer pageSize, final Response.Listener<ServiceDocsDeviceGetAll> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountid' when calling v1AccountAccountidDeviceGet",
        new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidDeviceGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountid}/device".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountid" + "\\}", apiInvoker.escapeString(accountid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_key", startKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsDeviceGetAll) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsDeviceGetAll.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create Device
  * Connect a new device to an account to enhance communication methods.
   * @param accountid Account ID, 32 alpha numeric
   * @param device device fields
   * @return ServiceDocsDeviceGetSingle
  */
  public ServiceDocsDeviceGetSingle v1AccountAccountidDevicePost (String accountid, ServiceVOIPDeviceAddEdit2 device) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = device;
    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountid' when calling v1AccountAccountidDevicePost",
        new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidDevicePost"));
    }
    // verify the required parameter 'device' is set
    if (device == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'device' when calling v1AccountAccountidDevicePost",
        new ApiException(400, "Missing the required parameter 'device' when calling v1AccountAccountidDevicePost"));
    }

    // create path and map variables
    String path = "/v1/account/{accountid}/device".replaceAll("\\{" + "accountid" + "\\}", apiInvoker.escapeString(accountid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsDeviceGetSingle) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsDeviceGetSingle.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create Device
   * Connect a new device to an account to enhance communication methods.
   * @param accountid Account ID, 32 alpha numeric   * @param device device fields
  */
  public void v1AccountAccountidDevicePost (String accountid, ServiceVOIPDeviceAddEdit2 device, final Response.Listener<ServiceDocsDeviceGetSingle> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = device;

    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountid' when calling v1AccountAccountidDevicePost",
        new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidDevicePost"));
    }
    // verify the required parameter 'device' is set
    if (device == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'device' when calling v1AccountAccountidDevicePost",
        new ApiException(400, "Missing the required parameter 'device' when calling v1AccountAccountidDevicePost"));
    }

    // create path and map variables
    String path = "/v1/account/{accountid}/device".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountid" + "\\}", apiInvoker.escapeString(accountid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsDeviceGetSingle) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsDeviceGetSingle.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Device Status
  * Retrieve a device’s status (e.g., registered or not registered) in an account.
   * @param accountid Account ID, 32 alpha numeric
   * @return ServiceDocsDeviceStatus
  */
  public ServiceDocsDeviceStatus v1AccountAccountidDeviceStatusGet (String accountid) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountid' when calling v1AccountAccountidDeviceStatusGet",
        new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidDeviceStatusGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountid}/device/status".replaceAll("\\{" + "accountid" + "\\}", apiInvoker.escapeString(accountid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServiceDocsDeviceStatus) ApiInvoker.deserialize(localVarResponse, "", ServiceDocsDeviceStatus.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Device Status
   * Retrieve a device’s status (e.g., registered or not registered) in an account.
   * @param accountid Account ID, 32 alpha numeric
  */
  public void v1AccountAccountidDeviceStatusGet (String accountid, final Response.Listener<ServiceDocsDeviceStatus> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountid' when calling v1AccountAccountidDeviceStatusGet",
        new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidDeviceStatusGet"));
    }

    // create path and map variables
    String path = "/v1/account/{accountid}/device/status".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountid" + "\\}", apiInvoker.escapeString(accountid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "BearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServiceDocsDeviceStatus) ApiInvoker.deserialize(localVarResponse,  "", ServiceDocsDeviceStatus.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
